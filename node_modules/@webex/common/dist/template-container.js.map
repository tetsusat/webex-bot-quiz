{"version":3,"sources":["template-container.js"],"names":["make","containers","TopContainer","shift","data","sizes","ChildContainer","length","name","concat","map","container","join","Container","args","set","ret","get","clear","key","mine","keys","delete","next","size","undefined","overwrite","has","insert","util","inspect","depth","add","push","TypeError"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport util from 'util';\n\n/**\n * Factory which produces a multi-keyed container based on the provided set of\n * constructors\n * @param {mixed} containers\n * @returns {Container}\n */\nfunction make(...containers) {\n  const TopContainer = containers.shift();\n\n  const data = new WeakMap();\n  const sizes = new WeakMap();\n\n  const ChildContainer = containers.length > 1 ? make(...containers) : containers[0];\n\n  const name = `(${[TopContainer.name].concat(containers.map((container) => container.name)).join(', ')})`;\n\n  /**\n   * Container that wraps an arbitrary set of tupples to their values\n   */\n  class Container {\n    /**\n     * @constructs Container\n     */\n    constructor(...args) {\n      data.set(this, new TopContainer(...args));\n      sizes.set(this, 0);\n    }\n\n    /**\n     * getter for .size\n     * @returns {number}\n     */\n    get size() {\n      return sizes.get(this);\n    }\n\n    /**\n     * Identical to Container#set() but leads slightly more intuitive code when\n     * the container is based on a Set rather than a Map.\n     * @returns {Container}\n     */\n    add(...args) {\n      return this.set(...args);\n    }\n\n    /**\n     * Removes all items from the container\n     * @returns {undefined}\n     */\n    clear() {\n      const ret = data.get(this).clear();\n\n      sizes.set(this, 0);\n\n      return ret;\n    }\n\n    /**\n     * Removes the specified item to the container\n     * @param {mixed} key\n     * @param {Array<mixed>} keys\n     * @returns {boolean}\n     */\n    delete(key, ...keys) {\n      const mine = data.get(this);\n\n      if (!keys.length) {\n        return mine.delete(key);\n      }\n\n      const next = mine.get(key);\n\n      if (!next) {\n        return false;\n      }\n\n      const ret = next.delete(...keys);\n\n      if (ret) {\n        sizes.set(this, sizes.get(this) - 1);\n      }\n\n      if (next.size === 0) {\n        mine.delete(key);\n      }\n\n      return ret;\n    }\n\n    /**\n     * Retrieves the specified item from the container\n     * @param {mixed} key\n     * @param {Array<mixed>} keys\n     * @returns {mixed}\n     */\n    get(key, ...keys) {\n      const mine = data.get(this);\n\n      if (!mine.get) {\n        return mine;\n      }\n\n      if (!keys.length) {\n        return mine.get(key);\n      }\n\n      const next = mine.get(key);\n\n      if (!next) {\n        return undefined;\n      }\n\n      if (!next.get) {\n        return next;\n      }\n\n      return next.get(...keys);\n    }\n\n    /**\n     * Indicates whether the container holds the specified item\n     * @param {mixed} key\n     * @param {Array<mixed>} keys\n     * @returns {Boolean}\n     */\n    has(...args) {\n      return typeof this.get(...args) !== 'undefined';\n    }\n\n    /**\n     * Stores the specified item in the container\n     * @param {mixed} key\n     * @param {Array<mixed>} args\n     * @param {mixed} value\n     * @returns {Container}\n     */\n    set(...args) {\n      let overwrite = false;\n\n      if (this.has(...args)) {\n        overwrite = true;\n      }\n      const mine = data.get(this);\n\n      const key = args.shift();\n\n      if (!mine.get) {\n        insert(mine, key, ...args);\n\n        return this;\n      }\n\n      let next = mine.get(key);\n\n      if (!next) {\n        if (!ChildContainer) {\n          insert(mine, key, ...args);\n\n          return this;\n        }\n        next = new ChildContainer();\n        insert(mine, key, next);\n      }\n      insert(next, ...args);\n\n      if (!overwrite) {\n        sizes.set(this, sizes.get(this) + 1);\n      }\n\n      return this;\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     */\n    inspect() {\n      return `Container${name} {\n  ${util.inspect(data.get(this), {depth: null})}\n}`;\n    }\n  }\n\n  return Container;\n}\n\n/**\n * Inserts into an arbitrary container\n * @param {Map|WeakMap|Set|WeakSet} container\n * @param {Array<mixed>} args\n * @private\n * @returns {undefined}\n */\nfunction insert(container, ...args) {\n  if (container.add) {\n    container.add(...args);\n\n    return;\n  }\n\n  if (container.set) {\n    container.set(...args);\n\n    return;\n  }\n\n  if (container.push) {\n    container.push(...args);\n\n    return;\n  }\n  throw new TypeError('Could not determine how to insert into the specified container');\n}\nexport {make as default};\n"]}