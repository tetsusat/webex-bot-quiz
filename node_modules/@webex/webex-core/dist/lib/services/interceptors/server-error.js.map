{"version":3,"sources":["server-error.js"],"names":["ServerErrorInterceptor","options","reason","WebexHttpError","InternalServerError","uri","feature","webex","internal","device","features","developer","get","value","metrics","submitClientMetrics","fields","success","tags","action","error","message","url","resolve","services","markFailedUrl","then","reject","Interceptor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AACA;;;;;;AACA;;;IAGqBA,sB;;;;;;;;;;;;;AAUnB;;;;;;oCAMgBC,O,EAASC,M,EAAQ;AAC/B,UAAKA,MAAM,YAAYC,0BAAeC,mBAAlC,IAA0DH,OAAO,CAACI,GAAtE,EAA2E;AACzE,YAAMC,OAAO,GAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2BC,QAA3B,CAAoCC,SAApC,CAA8CC,GAA9C,CAAkD,uBAAlD,CAAhB;;AAEA,YAAIN,OAAO,IAAIA,OAAO,CAACO,KAAvB,EAA8B;AAC5B,eAAKN,KAAL,CAAWC,QAAX,CAAoBM,OAApB,CAA4BC,mBAA5B,CAAgD,QAAhD,EAA0D;AACxDC,YAAAA,MAAM,EAAE;AAACC,cAAAA,OAAO,EAAE;AAAV,aADgD;AAExDC,YAAAA,IAAI,EAAE;AAACC,cAAAA,MAAM,EAAE,QAAT;AAAmBC,cAAAA,KAAK,EAAElB,MAAM,CAACmB,OAAjC;AAA0CC,cAAAA,GAAG,EAAErB,OAAO,CAACI;AAAvD;AAFkD,WAA1D;AAKA,iBAAO,iBAAQkB,OAAR,CAAgB,KAAKhB,KAAL,CAAWC,QAAX,CAAoBgB,QAApB,CAA6BC,aAA7B,CAA2CxB,OAAO,CAACI,GAAnD,CAAhB,EACJqB,IADI,CACC;AAAA,mBAAM,iBAAQC,MAAR,CAAezB,MAAf,CAAN;AAAA,WADD,CAAP;AAED;AACF;;AAED,aAAO,iBAAQyB,MAAR,CAAezB,MAAf,CAAP;AACD;;;;AA/BD;;;6BAGgB;AACd;AACA,aAAO,IAAIF,sBAAJ,CAA2B;AAACO,QAAAA,KAAK,EAAE;AAAR,OAA3B,CAAP;AACD;;;EAPiDqB,qB","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Interceptor} from '@webex/http-core';\nimport {WebexHttpError} from '@webex/webex-core';\n/**\n * Changes server url when it fails\n */\nexport default class ServerErrorInterceptor extends Interceptor {\n  /**\n  * @returns {HAMessagingInterceptor}\n  */\n  static create() {\n    // eslint-disable-next-line no-invalid-this\n    return new ServerErrorInterceptor({webex: this});\n  }\n\n\n  /**\n   * @see Interceptor#onResponseError\n   * @param {Object} options\n   * @param {Object} reason\n   * @returns {Object}\n   */\n  onResponseError(options, reason) {\n    if ((reason instanceof WebexHttpError.InternalServerError) && options.uri) {\n      const feature = this.webex.internal.device.features.developer.get('web-high-availability');\n\n      if (feature && feature.value) {\n        this.webex.internal.metrics.submitClientMetrics('web-ha', {\n          fields: {success: false},\n          tags: {action: 'failed', error: reason.message, url: options.uri}\n        });\n\n        return Promise.resolve(this.webex.internal.services.markFailedUrl(options.uri))\n          .then(() => Promise.reject(reason));\n      }\n    }\n\n    return Promise.reject(reason);\n  }\n}\n"]}