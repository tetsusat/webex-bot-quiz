{"version":3,"sources":["make-webex-store.js"],"names":["bindings","makeWebexStore","type","webex","WebexStore","keyFactory","namespace","logger","debug","set","promises","forEach","binding","push","clear","all","key","_getBinding","then","del","get","value","put","serialize","resolve","adapter","bind","_binding","config","storage","prototype","Events"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport Events from 'ampersand-events';\nimport {oneFlight} from '@webex/common';\n\nconst bindings = new WeakMap();\n\n/**\n * Makes a WebexStore for the specified type bound to the specified webex instance\n * @param {string} type\n * @param {ProxyWebex} webex\n * @private\n * @returns {WebexStore}\n */\nexport default function makeWebexStore(type, webex) {\n  /**\n   * Lazy Key-Value Store Interface\n   */\n  class WebexStore {\n    /**\n     * @param {Object} attrs\n     * @param {Object} options\n     * @returns {Store}\n     */\n    constructor() {\n      webex.logger.debug(`webex-store: constructing ${type}Storage`);\n      bindings.set(this, new Map());\n    }\n\n    /**\n     * Provides easy access to the storage adapter identified in config.\n     * @returns {Object}\n     */\n    get adapter() {\n      return webex.config.storage[`${type}Adapter`];\n    }\n\n    /**\n     * @returns {WeakMap}\n     */\n    get bindings() {\n      return bindings.get(this);\n    }\n\n    /**\n     * Clears the store\n     * @returns {Promise}\n     */\n    clear() {\n      const promises = [];\n\n      this.bindings.forEach((binding) => {\n        promises.push(binding.clear());\n      });\n\n      return Promise.all(promises);\n    }\n\n    /**\n     * Deletes the specified key from the store\n     * @param {string} namespace\n     * @param {string} key\n     * @returns {[type]}\n     */\n    del(namespace, key) {\n      webex.logger.debug(`webex-store: removing ${namespace}:${key}`);\n\n      return this._getBinding(namespace)\n        .then((binding) => binding.del(key));\n    }\n\n    /**\n     * Retrieves the value specified by key from the store. Rejects with\n     * NotFoundError if no value can be found\n     * @param {string} namespace\n     * @param {string} key\n     * @returns {Promise}\n     */\n    get(namespace, key) {\n      webex.logger.debug(`webex-store: retrieving ${namespace}:${key}`);\n\n      return this._getBinding(namespace)\n        .then((binding) => binding.get(key));\n    }\n\n    /**\n     * Writes a value to the store. Deletes the specified key from the store\n     * if passed `undefined`\n     * @param {string} namespace\n     * @param {string} key\n     * @param {any} value\n     * @returns {Promise} Resolves with value (to simplify write-through caching)\n     */\n    put(namespace, key, value) {\n      if (typeof value === 'undefined') {\n        return this.del(namespace, key);\n      }\n      webex.logger.debug(`webex-store: setting ${namespace}:${key}`);\n\n      return this._getBinding(namespace)\n        .then((binding) => binding.put(key, value.serialize ? value.serialize() : value))\n        .then(() => value);\n    }\n\n    @oneFlight({keyFactory: (namespace) => namespace})\n    /**\n     * Creates an interface bound to the specified namespace\n     * @param {string} namespace\n     * @private\n     * @returns {Promise}\n     */\n    // suppress doc warning because decorators confuse eslint\n    // eslint-disable-next-line require-jsdoc\n    _getBinding(namespace) {\n      return new Promise((resolve) => {\n        webex.logger.debug(`storage: getting binding for \\`${namespace}\\``);\n        const binding = this.bindings.get(namespace);\n\n        if (binding) {\n          webex.logger.debug(`storage: found binding for \\`${namespace}\\``);\n\n          return resolve(binding);\n        }\n\n        return resolve(this.adapter.bind(namespace, {logger: webex.logger})\n          .then((_binding) => {\n            webex.logger.debug(`storage: made binding for \\`${namespace}\\``);\n            this.bindings.set(namespace, _binding);\n\n            return _binding;\n          }));\n      });\n    }\n  }\n\n  Object.assign(WebexStore.prototype, Events);\n\n  return new WebexStore();\n}\n"]}