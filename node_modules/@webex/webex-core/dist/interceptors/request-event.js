"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _construct = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/reflect/construct"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _httpCore = require("@webex/http-core");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = (0, _construct.default)(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_construct.default) return false; if (_construct.default.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call((0, _construct.default)(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 * @class
 */
var RequestEventInterceptor = /*#__PURE__*/function (_Interceptor) {
  (0, _inherits2.default)(RequestEventInterceptor, _Interceptor);

  var _super = _createSuper(RequestEventInterceptor);

  function RequestEventInterceptor() {
    (0, _classCallCheck2.default)(this, RequestEventInterceptor);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(RequestEventInterceptor, [{
    key: "onRequest",

    /**
     * @see Interceptor#onRequest
     * @param {Object} options
     * @returns {Object}
     */
    value: function onRequest(options) {
      var logger = (0, _get2.default)(this, 'webex.logger', console);

      try {
        this.webex.trigger('request:start', options);
      } catch (error) {
        logger.warn('event handler for request:start failed ', error);
      }

      return _promise.default.resolve(options);
    }
    /**
     * @see Interceptor#onRequest
     * @param {Object} options
     * @param {Error} reason
     * @returns {Object}
     */

  }, {
    key: "onRequestError",
    value: function onRequestError(options, reason) {
      // We need to do the normal onRequest logging, but then log how the request
      // failed since the response logger won't be called.
      var logger = (0, _get2.default)(this, 'webex.logger', console);

      try {
        this.webex.trigger('request:end', options, reason);
        this.webex.trigger('request:failure', options, reason);
      } catch (error) {
        logger.warn('event handler for request:end failed ', error);
      }

      return _promise.default.reject(reason);
    }
    /**
     * @see Interceptor#onResponse
     * @param {Object} options
     * @param {HttpResponse} response
     * @returns {Object}
     */

  }, {
    key: "onResponse",
    value: function onResponse(options, response) {
      var logger = (0, _get2.default)(this, 'webex.logger', console);

      try {
        this.webex.trigger('request:success', response.options, response);
      } catch (error) {
        logger.warn('event handler for request:success failed ', error);
      }

      return _promise.default.resolve(response);
    }
    /**
     * @see Interceptor#onResponseError
     * @param {Object} options
     * @param {Error} reason
     * @returns {Object}
     */

  }, {
    key: "onResponseError",
    value: function onResponseError(options, reason) {
      var logger = (0, _get2.default)(this, 'webex.logger', console);

      try {
        this.webex.trigger('request:end', options, reason);
        this.webex.trigger('request:failure', options, reason);
      } catch (error) {
        logger.warn('event handler for request:failure failed ', error);
      }

      return _promise.default.reject(reason);
    }
  }], [{
    key: "create",

    /**
     * @returns {RequestEventInterceptor}
     */
    value: function create() {
      return new RequestEventInterceptor({
        webex: this
      });
    }
  }]);
  return RequestEventInterceptor;
}(_httpCore.Interceptor);

exports.default = RequestEventInterceptor;
//# sourceMappingURL=request-event.js.map
