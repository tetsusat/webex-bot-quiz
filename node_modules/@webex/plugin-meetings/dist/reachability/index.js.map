{"version":3,"sources":["index.js"],"names":["Reachability","webex","reachabilityRequest","ReachabilityRequest","clusterLatencyResults","setup","window","localStorage","removeItem","REACHABILITY","LoggerProxy","logger","error","getClusters","clusters","performReachabilityCheck","results","setItem","cluster","iceServers","udp","tcp","map","url","username","credential","urls","iceCandidatePoolSize","iceTransportPolicy","key","config","peerConnection","RTCPeerConnection","peerConnectionError","startTime","begin","clusterList","buildPeerConnectionConfig","createPeerConnection","createOffer","offerToReceiveAudio","description","setLocalDescription","iceGatheringState","catch","iceGatheringStateError","all","then","parseIceResultsToReachabilityResults","reachabilityLatencyResults","logUnreachableClusters","unreachableList","forEach","unreachable","reachable","push","onicegatheringstatechange","COMPLETE","ICE_GATHERING_STATE","iceConnectionState","elapsed","getElapsedTime","log","setLatencyAndClose","onicecandidate","e","SERVER_REFLEXIVE","candidate","String","type","toLowerCase","ELAPSED","waitTime","resolve","peerConnectionProxy","Proxy","get","target","property","targetMember","bind","set","value","clusterId","Reflect","handleIceGatheringStateChange","handleOnIceCandidate","setTimeout","CLOSED","CONNECTION_STATE","connectionState","list","getUnreachablClusters","iceResults","reachabilityMap","latencyResult","latencyInMilliseconds","toString","length","getLocalSDPForClusters","localSDPData","REACHABLE","UNREACHABLE","resultKey","intialState","close"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint-disable class-methods-use-this */\n/* globals window */\nimport _ from 'lodash';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {\n  ICE_GATHERING_STATE,\n  CONNECTION_STATE,\n  REACHABILITY\n} from '../constants';\n\nimport ReachabilityRequest from './request';\n\n/**\n * @class Reachability\n * @export\n */\nexport default class Reachability {\n  /**\n   * Creates an instance of Reachability.\n   * @param {object} webex\n   * @memberof Reachability\n   */\n  constructor(webex) {\n    this.webex = webex;\n\n    /**\n     * internal request object for the server\n     * @instance\n     * @type {Array}\n     * @private\n     * @memberof Reachability\n     */\n    this.reachabilityRequest = new ReachabilityRequest(this.webex);\n\n    /**\n     * internal object of clusters latency results\n     * @instance\n     * @type {object}\n     * @private\n     * @memberof Reachability\n     */\n    this.clusterLatencyResults = {};\n  }\n\n\n  /**\n   * fetches reachability data\n   * @returns {Object} reachability data\n   * @public\n   * @async\n   * @memberof Reachability\n   */\n  async gatherReachability() {\n    this.setup();\n\n    // Remove stored reachability results to ensure no stale data\n    if (window?.localStorage?.removeItem) {\n      window.localStorage.removeItem(REACHABILITY.localStorage);\n    }\n    else {\n      LoggerProxy.logger.error('Reachability:index#gatherReachability --> Error in accessing LocalStorage.');\n\n      return {};\n    }\n\n    // Fetch clusters and measure latency\n    try {\n      const clusters = await this.reachabilityRequest.getClusters();\n\n      // Perform Reachability Check\n      const results = await this.performReachabilityCheck(clusters);\n\n      window.localStorage.setItem(REACHABILITY.localStorage, JSON.stringify(results));\n\n      return results;\n    }\n    catch (getClusterError) {\n      LoggerProxy.logger.error(`Reachability:index#gatherReachability --> Error in calling getClusters(): ${getClusterError}`);\n\n      return {};\n    }\n  }\n\n\n  /**\n   * Generate peerConnection config settings\n   * @param {object} cluster\n   * @returns {object} peerConnectionConfig\n   * @private\n   * @memberof Reachability\n   */\n  buildPeerConnectionConfig(cluster) {\n    const iceServers = _.uniq([\n      ...cluster.udp,\n      ...cluster.tcp\n    ]).map((url) => ({\n      username: '',\n      credential: '',\n      urls: [url]\n    }));\n\n    return {\n      iceServers: [\n        ...iceServers\n      ],\n      iceCandidatePoolSize: '0',\n      iceTransportPolicy: 'all'\n    };\n  }\n\n\n  /**\n   * Creates an RTCPeerConnection\n   * @param {object} cluster\n   * @returns {RTCPeerConnection} peerConnection\n   * @private\n   * @memberof Reachability\n   */\n  createPeerConnection(cluster) {\n    const {key, config} = cluster;\n\n    try {\n      const peerConnection = new window.RTCPeerConnection(config);\n\n      peerConnection.key = key;\n\n      return peerConnection;\n    }\n    catch (peerConnectionError) {\n      LoggerProxy.logger.error(`Reachability:index#getLocalSDPForClusters --> Error creating peerConnection: ${peerConnectionError}`);\n\n      return null;\n    }\n  }\n\n\n  /**\n   * Gets total elapsed time\n   * @param {RTCPeerConnection} peerConnection\n   * @returns {Number} Milliseconds\n   * @private\n   * @memberof Reachability\n   */\n  getElapsedTime(peerConnection) {\n    const startTime = peerConnection.begin;\n\n    delete peerConnection.begin;\n\n    return Date.now() - startTime;\n  }\n\n\n  /**\n   * creates offer and generates localSDP\n   * @param {object} clusterList cluster List\n   * @returns {Promise} Reachability latency results\n   * @private\n   * @memberof Reachability\n   */\n  getLocalSDPForClusters(clusterList) {\n    let clusters = [...Object.keys(clusterList)];\n\n    clusters = clusters.map(async (key) => {\n      const cluster = clusterList[key];\n      const config = this.buildPeerConnectionConfig(cluster);\n      const peerConnection = this.createPeerConnection({key, config});\n      const description = await peerConnection.createOffer({offerToReceiveAudio: true});\n\n      peerConnection.begin = Date.now();\n      peerConnection.setLocalDescription(description);\n\n      return this.iceGatheringState(peerConnection)\n        .catch((iceGatheringStateError) => {\n          LoggerProxy.logger.error(`Reachability:index#getLocalSDPForClusters --> Error in getLocalSDP : ${iceGatheringStateError}`);\n        });\n    });\n\n    return Promise.all(clusters)\n      .then(this.parseIceResultsToReachabilityResults)\n      .then((reachabilityLatencyResults) => {\n        this.logUnreachableClusters();\n\n        // return results\n        return reachabilityLatencyResults;\n      });\n  }\n\n\n  /**\n   * Get list of all unreachable clusters\n   * @returns {array} Unreachable clusters\n   * @private\n   * @memberof Reachability\n   */\n  getUnreachablClusters() {\n    const unreachableList = [];\n    const clusters = this.clusterLatencyResults;\n\n    Object.keys(clusters).forEach((key) => {\n      const cluster = clusters[key];\n\n      if (cluster.unreachable && !cluster.reachable) {\n        unreachableList.push(key);\n      }\n    });\n\n    return unreachableList;\n  }\n\n\n  /**\n   * Attach an event handler for the icegatheringstatechange\n   * event and measure latency.\n   * @param {RTCPeerConnection} peerConnection\n   * @returns {undefined}\n   * @private\n   * @memberof Reachability\n   */\n  handleIceGatheringStateChange(peerConnection) {\n    peerConnection.onicegatheringstatechange = () => {\n      const {COMPLETE} = ICE_GATHERING_STATE;\n\n      if (peerConnection.iceConnectionState === COMPLETE) {\n        const elapsed = this.getElapsedTime(peerConnection);\n\n        LoggerProxy.logger.log(`Reachability:index#onIceGatheringStateChange --> Successfully pinged ${peerConnection.key}:`, elapsed);\n        this.setLatencyAndClose(peerConnection, elapsed);\n      }\n    };\n  }\n\n\n  /**\n   * Attach an event handler for the icecandidate\n   * event and measure latency.\n   * @param {RTCPeerConnection} peerConnection\n   * @returns {undefined}\n   * @private\n   * @memberof Reachability\n   */\n  handleOnIceCandidate(peerConnection) {\n    peerConnection.onicecandidate = (e) => {\n      const SERVER_REFLEXIVE = 'srflx';\n\n      if (e.candidate && String(e.candidate.type).toLowerCase() === SERVER_REFLEXIVE) {\n        const elapsed = this.getElapsedTime(peerConnection);\n\n        LoggerProxy.logger.log(`Reachability:index#onIceCandidate --> Successfully pinged ${peerConnection.key}:`, elapsed);\n        this.setLatencyAndClose(peerConnection, elapsed);\n      }\n    };\n  }\n\n\n  /**\n   * An event handler on an RTCPeerConnection when the state of the ICE\n   * candidate gathering process changes. Used to measure connection\n   * speed.\n   * @private\n   * @param {RTCPeerConnection} peerConnection\n   * @returns {Promise}\n   */\n  iceGatheringState(peerConnection) {\n    const ELAPSED = 'elapsed';\n    const waitTime = 5e3;\n\n    return new Promise((resolve) => {\n      const peerConnectionProxy = new window.Proxy(peerConnection, {\n        get(target, property) {\n          const targetMember = target[property];\n\n          if (typeof (targetMember) === 'function') {\n            return targetMember.bind(target);\n          }\n\n          return targetMember;\n        },\n        set: (target, property, value) => {\n          // only intercept elapsed property\n          if (property === ELAPSED) {\n            resolve({clusterId: peerConnection.key, elapsed: value});\n\n            return true;\n          }\n\n          // pass thru\n          return window.Reflect.set(target, property, value);\n        }\n      });\n\n      // Using peerConnection proxy so handle functions below\n      // won't be coupled to our promise implementation\n      this.handleIceGatheringStateChange(peerConnectionProxy);\n      this.handleOnIceCandidate(peerConnectionProxy);\n\n      // Set maximum timeout\n      window.setTimeout(() => {\n        const CLOSED = {CONNECTION_STATE};\n\n        // Close any open peerConnections\n        if (peerConnectionProxy.connectionState !== CLOSED) {\n          this.setLatencyAndClose(peerConnectionProxy, null);\n        }\n      }, waitTime);\n    });\n  }\n\n\n  /**\n   * Make a log of unreachable clusters.\n   * @returns {undefined}\n   * @private\n   * @memberof Reachability\n   */\n  logUnreachableClusters() {\n    const list = this.getUnreachablClusters();\n\n    list.forEach((cluster) => {\n      LoggerProxy.logger.error(`Reachability:index#getLocalSDPForClusters --> No ice candidate for ${cluster}.`);\n    });\n  }\n\n\n  /**\n   * Calculates time to establish connection\n   * @param {array} iceResults iceResults\n   * @returns {object} reachabilityMap\n   * @private\n   * @memberof Reachability\n   */\n  parseIceResultsToReachabilityResults(iceResults) {\n    const reachabilityMap = {};\n\n    iceResults.forEach(({clusterId, elapsed}) => {\n      let latencyResult;\n\n      if (elapsed === null) {\n        latencyResult = {reachable: 'false'};\n      }\n      else {\n        latencyResult = {\n          reachable: 'true',\n          latencyInMilliseconds: (elapsed).toString()\n        };\n      }\n\n      reachabilityMap[clusterId] = {\n        udp: latencyResult,\n        tcp: latencyResult\n      };\n    });\n\n    return reachabilityMap;\n  }\n\n\n  /**\n   * fetches reachability data\n   * @param {object} clusterList\n   * @returns {Promise<localSDPData>} reachability check results\n   * @private\n   * @memberof Reachability\n   */\n  performReachabilityCheck(clusterList) {\n    if (!clusterList || !Object.keys(clusterList).length) {\n      return Promise.resolve({});\n    }\n\n    return new Promise((resolve) => {\n      this.getLocalSDPForClusters(clusterList)\n        .then((localSDPData) => {\n          if (!localSDPData || !Object.keys(localSDPData).length) {\n            // TODO: handle the error condition properly and try retry\n            LoggerProxy.logger.log('Reachability:index#performReachabilityCheck --> Local SDP is empty or has missing elements..returning');\n            resolve({});\n          }\n          else {\n            resolve(localSDPData);\n          }\n        })\n        .catch((error) => {\n          LoggerProxy.logger.error(`Reachability:index#performReachabilityCheck --> Error in getLocalSDPForClusters: ${error}`);\n          resolve({});\n        });\n    });\n  }\n\n\n  /**\n   * Records latency and closes the peerConnection\n   * @param {RTCPeerConnection} peerConnection\n   * @param {number} elapsed Latency in milliseconds\n   * @returns {undefined}\n   * @private\n   * @memberof Reachability\n   */\n  setLatencyAndClose(peerConnection, elapsed) {\n    const REACHABLE = 'reachable';\n    const UNREACHABLE = 'unreachable';\n    const {CLOSED} = CONNECTION_STATE;\n    const {key} = peerConnection;\n    const resultKey = elapsed === null ? UNREACHABLE : REACHABLE;\n    const intialState = {[REACHABLE]: 0, [UNREACHABLE]: 0};\n\n    if (peerConnection.connectionState === CLOSED) {\n      LoggerProxy.logger.log(`Reachability:index#setLatencyAndClose --> Attempting to set latency of ${elapsed} on closed peerConnection.`);\n\n      return;\n    }\n\n    this.clusterLatencyResults[key] = this.clusterLatencyResults[key] || intialState;\n    this.clusterLatencyResults[key][resultKey] += 1;\n\n    // Set to null in case this fired from\n    // an event other than onIceCandidate\n    peerConnection.onicecandidate = null;\n    peerConnection.close();\n    peerConnection.elapsed = elapsed;\n  }\n\n\n  /**\n   * utility function\n   * @returns {undefined}\n   * @private\n   * @memberof Reachability\n   */\n  setup() {\n    this.clusterLatencyResults = {};\n  }\n}\n"]}