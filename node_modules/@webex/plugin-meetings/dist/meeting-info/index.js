"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _construct = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/reflect/construct"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _webexCore = require("@webex/webex-core");

var _constants = require("../constants");

var _loggerProxy = _interopRequireDefault(require("../common/logs/logger-proxy"));

var _collection = _interopRequireDefault(require("./collection"));

var _request = _interopRequireDefault(require("./request"));

var _util = _interopRequireDefault(require("./util"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = (0, _construct.default)(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_construct.default) return false; if (_construct.default.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call((0, _construct.default)(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 * @class MeetingInfo
 */
var MeetingInfo = /*#__PURE__*/function (_StatelessWebexPlugin) {
  (0, _inherits2.default)(MeetingInfo, _StatelessWebexPlugin);

  var _super = _createSuper(MeetingInfo);

  /**
   *
   * @param {Object} attrs
   * @param {Object} options
   */
  function MeetingInfo(attrs, options) {
    var _this;

    (0, _classCallCheck2.default)(this, MeetingInfo);
    _this = _super.call(this, {}, options);
    /**
     * The meeting info request server interface
     * @instance
     * @type {Object}
     * @private
     * @memberof MeetingInfo
    */

    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "namespace", _constants.MEETINGS);
    _this.meetingInfoRequest = new _request.default({}, options);
    /**
     * The meeting information collection interface
     * @instance
     * @type {Object}
     * @private
     * @memberof MeetingInfo
    */

    _this.meetingInfoCollection = new _collection.default();
    return _this;
  }
  /**
   * @param {string} id
   * @returns {object}
   * @public
   * @memberof MeetingInfo
   */


  (0, _createClass2.default)(MeetingInfo, [{
    key: "getMeetingInfo",
    value: function getMeetingInfo(id) {
      return this.meetingInfoCollection.get(id);
    }
    /**
     * @param {string} id
     * @param {object} info
     * @returns {null}
     * @public
     * @memberof MeetingInfo
     */

  }, {
    key: "setMeetingInfo",
    value: function setMeetingInfo(id, info) {
      this.meetingInfoCollection.set(id, info);
    }
    /**
     * Helper to make the actual MeetingInfo request and set the meetingInfo if successful, else reject
     * @param {Object} options
     * @returns {Promise}
     * @private
     * @memberof MeetingInfo
     */

  }, {
    key: "requestFetchInfo",
    value: function requestFetchInfo(options) {
      var _this2 = this;

      return this.meetingInfoRequest.fetchMeetingInfo(options).then(function (info) {
        if (info && info.body) {
          _this2.setMeetingInfo(info.body.sipMeetingUri || info.body.meetingLink, info.body);
        }

        return info;
      }).catch(function (error) {
        _loggerProxy.default.logger.error("Meeting-info:index#requestFetchInfo -->  ".concat(error, " fetch meetingInfo"));

        return _promise.default.reject(error);
      });
    }
    /**
     * Helper to generate the options for the MeetingInfo request
     * @param {String} destination
     * @param {String} type
     * @returns {Promise}
     * @private
     * @memberof MeetingInfo
     */

  }, {
    key: "fetchInfoOptions",
    value: function fetchInfoOptions(destination, type) {
      return _util.default.generateOptions({
        destination: destination,
        type: type,
        webex: this.webex
      });
    }
    /**
     * Fetches meeting info from the server
     * @param {String} destination one of many different types of destinations to look up info for
     * @param {String} [type] to match up with the destination value
     * @returns {Promise} returns a meeting info object
     * @public
     * @memberof MeetingInfo
     */

  }, {
    key: "fetchMeetingInfo",
    value: function fetchMeetingInfo(destination) {
      var _this3 = this;

      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this.fetchInfoOptions(destination, type).then(function (options) {
        return (// fetch meeting info
          _this3.requestFetchInfo(options).catch(function (error) {
            // if it failed the first time as meeting link
            if (options.type === _constants._MEETING_LINK_) {
              // convert the meeting link to sip URI and retry
              return _this3.requestFetchInfo(_this3.fetchInfoOptions(_util.default.convertLinkToSip(destination), _constants._SIP_URI_));
            }

            return _promise.default.reject(error);
          })
        );
      });
    }
  }]);
  return MeetingInfo;
}(_webexCore.StatelessWebexPlugin);

exports.default = MeetingInfo;
//# sourceMappingURL=index.js.map
