{"version":3,"sources":["util.js"],"names":["MeetingInfoUtil","getParsedUrl","link","parsedUrl","url","parse","protocol","HTTPS_PROTOCOL","error","LoggerProxy","logger","warn","isMeetingLink","value","hostNameBool","hostname","includes","WEBEX_DOT_COM","pathNameBool","pathname","MEET","MEET_M","JOIN","isConversationUrl","webex","clusterId","internal","services","getClusterId","endsWith","CONVERSATION_SERVICE","convertLinkToSip","user","userIndex","lastIndexOf","substring","company","companyIndex","replace","WWW_DOT","isSipUri","sipString","sipUri","DIALER_REGEX","SIP_ADDRESS","exec","isPhoneNumber","phoneNumber","isValidNumber","PHONE_NUMBER","test","getHydraId","destination","type","id","cluster","UUID_REG","_ROOM_","room","_PEOPLE_","people","getSipUriFromHydraPersonId","get","then","res","emails","length","ParameterError","catch","err","generateOptions","from","options","hydraId","_MEETING_LINK_","_SIP_URI_","_CONVERSATION_URL_","wasHydraPerson","resolve","waitForCatalog","conversationUrl","conversation","getUrlFromClusterId","getResourceUrl","resource","LOCI","MEETINGINFO","method","HTTP_VERBS","GET","uri","_PERSONAL_ROOM_","_MEETING_ID_","TYPE","USE_URI_LOOKUP_FALSE","PUT","_LOCUS_ID_","getRequestParams","resourceOptions","api","requestParams","concat","ALTERNATE_REDIRECT_TRUE","body","lookupType"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AAIA;;AACA;;AACA;;AA0BA,IAAMA,eAAe,GAAG,EAAxB;;AAEAA,eAAe,CAACC,YAAhB,GAA+B,UAACC,IAAD,EAAU;AACvC,MAAI;AACF,QAAIC,SAAS,GAAGC,aAAIC,KAAJ,CAAUH,IAAV,CAAhB;;AAEA,QAAI,CAACC,SAAL,EAAgB;AACd,aAAO,KAAP;AACD,KALC,CAMF;;;AACA,QAAI,CAACA,SAAS,CAACG,QAAf,EAAyB;AACvBH,MAAAA,SAAS,GAAGC,aAAIC,KAAJ,WAAaE,yBAAb,SAA8BL,IAA9B,EAAZ;AACD;;AAED,WAAOC,SAAP;AACD,GAZD,CAaA,OAAOK,KAAP,EAAc;AACZC,yBAAYC,MAAZ,CAAmBC,IAAnB,8EAA8FH,KAA9F;;AAEA,WAAO,IAAP;AACD;AACF,CAnBD;AAqBA;;;;;;;AAKAR,eAAe,CAACY,aAAhB,GAAgC,UAACC,KAAD,EAAW;AACzC,MAAMV,SAAS,GAAGH,eAAe,CAACC,YAAhB,CAA6BY,KAA7B,CAAlB;AACA,MAAMC,YAAY,GAAGX,SAAS,CAACY,QAAV,IAAsBZ,SAAS,CAACY,QAAV,CAAmBC,QAAnB,CAA4BC,wBAA5B,CAA3C;AACA,MAAMC,YAAY,GAAGf,SAAS,CAACgB,QAAV,KAAuBhB,SAAS,CAACgB,QAAV,CAAmBH,QAAnB,YAAgCI,eAAhC,MAA2CjB,SAAS,CAACgB,QAAV,CAAmBH,QAAnB,YAAgCK,iBAAhC,EAA3C,IAAwFlB,SAAS,CAACgB,QAAV,CAAmBH,QAAnB,YAAgCM,eAAhC,EAA/G,CAArB;AAEA,SAAOR,YAAY,IAAII,YAAvB;AACD,CAND;;AAQAlB,eAAe,CAACuB,iBAAhB,GAAoC,UAACV,KAAD,EAAQW,KAAR,EAAkB;AACpD,MAAMC,SAAS,GAAGD,KAAK,CAACE,QAAN,CAAeC,QAAf,CAAwBC,YAAxB,CAAqCf,KAArC,CAAlB;;AAEA,MAAIY,SAAJ,EAAe;AACb,WAAOA,SAAS,CAACI,QAAV,CAAmBC,+BAAnB,CAAP;AACD;;AAED,SAAO,KAAP;AACD,CARD;;AAUA9B,eAAe,CAAC+B,gBAAhB,GAAmC,UAAClB,KAAD,EAAW;AAC5C,MAAMV,SAAS,GAAGH,eAAe,CAACC,YAAhB,CAA6BY,KAA7B,CAAlB;;AAEA,MAAI,CAACV,SAAL,EAAgB;AACd,WAAO,IAAP;AACD;;AACD,MAAI6B,IAAJ;;AAEA,MAAI7B,SAAS,CAACgB,QAAd,EAAwB;AACtB,QAAMc,SAAS,GAAG9B,SAAS,CAACgB,QAAV,CAAmBe,WAAnB,CAA+B,GAA/B,CAAlB;AAEAF,IAAAA,IAAI,GAAG7B,SAAS,CAACgB,QAAV,CAAmBgB,SAAnB,CAA6BF,SAAS,GAAG,CAAzC,CAAP;AACD;;AACD,MAAI,CAACD,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AACD,MAAII,OAAJ;;AAEA,MAAIjC,SAAS,CAACY,QAAd,EAAwB;AACtB,QAAMsB,YAAY,GAAGlC,SAAS,CAACY,QAAV,CAAmBmB,WAAnB,YAAmCjB,wBAAnC,EAArB;AAEAmB,IAAAA,OAAO,GAAGjC,SAAS,CAACY,QAAV,CAAmBoB,SAAnB,CAA6B,CAA7B,EAAgCE,YAAhC,EAA8CC,OAA9C,CAAsDC,kBAAtD,EAA+D,EAA/D,CAAV;AACD;;AACD,MAAI,CAACH,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,mBAAUJ,IAAV,cAAkBI,OAAlB,cAA6BnB,wBAA7B;AACD,CA5BD;;AA+BAjB,eAAe,CAACwC,QAAhB,GAA2B,UAACC,SAAD,EAAe;AACxC;AACA;AACA,MAAMC,MAAM,GAAGC,wBAAaC,WAAb,CAAyBC,IAAzB,CAA8BJ,SAA9B,CAAf;;AAEA,SAAOC,MAAP;AACD,CAND;;AAQA1C,eAAe,CAAC8C,aAAhB,GAAgC,UAACC,WAAD,EAAiB;AAC/C,MAAMC,aAAa,GAAGL,wBAAaM,YAAb,CAA0BC,IAA1B,CAA+BH,WAA/B,CAAtB;;AAEA,SAAOC,aAAP;AACD,CAJD;;AAMAhD,eAAe,CAACmD,UAAhB,GAA6B,UAACC,WAAD,EAAiB;AAAA,4BAChB,gCAAmBA,WAAnB,CADgB;AAAA,MACrCC,IADqC,uBACrCA,IADqC;AAAA,MAC/BC,EAD+B,uBAC/BA,EAD+B;AAAA,MAC3BC,OAD2B,uBAC3BA,OAD2B;;AAG5C,MAAID,EAAE,IAAIE,oBAASN,IAAT,CAAcI,EAAd,CAAV,EAA6B;AAC3B,QAAID,IAAI,KAAKI,iBAAb,EAAqB;AACnB,aAAO;AAACC,QAAAA,IAAI,EAAE,IAAP;AAAaN,QAAAA,WAAW,EAAEE,EAA1B;AAA8BC,QAAAA,OAAO,EAAPA;AAA9B,OAAP;AACD;;AACD,QAAIF,IAAI,KAAKM,mBAAb,EAAuB;AACrB,aAAO;AAACC,QAAAA,MAAM,EAAE,IAAT;AAAeR,QAAAA,WAAW,EAAEE,EAA5B;AAAgCC,QAAAA,OAAO,EAAPA;AAAhC,OAAP;AACD;;AAED,WAAO,EAAP;AACD;;AAED,SAAO,EAAP;AACD,CAfD;;AAiBAvD,eAAe,CAAC6D,0BAAhB,GAA6C,UAACT,WAAD,EAAc5B,KAAd;AAAA,SAAwBA,KAAK,CAACoC,MAAN,CAAaE,GAAb,CAAiBV,WAAjB,EAA8BW,IAA9B,CAAmC,UAACC,GAAD,EAAS;AAC/G,QAAIA,GAAG,CAACC,MAAJ,IAAcD,GAAG,CAACC,MAAJ,CAAWC,MAA7B,EAAqC;AACnC,aAAOF,GAAG,CAACC,MAAJ,CAAW,CAAX,CAAP;AACD;;AACD,UAAM,IAAIE,kBAAJ,CAAmB,iDAAnB,CAAN;AACD,GALoE,EAKlEC,KALkE,CAK5D,UAACC,GAAD,EAAS;AAChB5D,yBAAYC,MAAZ,CAAmBF,KAAnB,uGAAwH6D,GAAxH;;AACA,UAAMA,GAAN;AACD,GARoE,CAAxB;AAAA,CAA7C;;AAUArE,eAAe,CAACsE,eAAhB;AAAA,qFAAkC,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBnB,YAAAA,WADyB,GACGmB,IADH,CACzBnB,WADyB,EACZC,IADY,GACGkB,IADH,CACZlB,IADY,EACN7B,KADM,GACG+C,IADH,CACN/C,KADM;;AAAA,iBAG5B6B,IAH4B;AAAA;AAAA;AAAA;;AAAA,6CAIvB;AACLD,cAAAA,WAAW,EAAXA,WADK;AAELC,cAAAA,IAAI,EAAJA;AAFK,aAJuB;;AAAA;AAS1BmB,YAAAA,OAT0B,GAShB,EATgB;AAU1BC,YAAAA,OAV0B,GAUhBzE,eAAe,CAACmD,UAAhB,CAA2BC,WAA3B,CAVgB;;AAAA,iBAY5BpD,eAAe,CAACY,aAAhB,CAA8BwC,WAA9B,CAZ4B;AAAA;AAAA;AAAA;;AAa9BoB,YAAAA,OAAO,CAACnB,IAAR,GAAeqB,yBAAf;AACAF,YAAAA,OAAO,CAACpB,WAAR,GAAsBA,WAAtB;AAd8B;AAAA;;AAAA;AAAA,iBAgBvBpD,eAAe,CAACwC,QAAhB,CAAyBY,WAAzB,CAhBuB;AAAA;AAAA;AAAA;;AAiB9BoB,YAAAA,OAAO,CAACnB,IAAR,GAAesB,oBAAf;AACAH,YAAAA,OAAO,CAACpB,WAAR,GAAsBA,WAAtB;AAlB8B;AAAA;;AAAA;AAAA,iBAoBvBpD,eAAe,CAAC8C,aAAhB,CAA8BM,WAA9B,CApBuB;AAAA;AAAA;AAAA;;AAqB9BoB,YAAAA,OAAO,CAACnB,IAAR,GAAesB,oBAAf;AACAH,YAAAA,OAAO,CAACpB,WAAR,GAAsBA,WAAtB;AAtB8B;AAAA;;AAAA;AAAA,iBAwBvBpD,eAAe,CAACuB,iBAAhB,CAAkC6B,WAAlC,EAA+C5B,KAA/C,CAxBuB;AAAA;AAAA;AAAA;;AAyB9BgD,YAAAA,OAAO,CAACnB,IAAR,GAAeuB,6BAAf;AACAJ,YAAAA,OAAO,CAACpB,WAAR,GAAsBA,WAAtB;AA1B8B;AAAA;;AAAA;AAAA,iBA4BvBqB,OAAO,CAACb,MA5Be;AAAA;AAAA;AAAA;;AA6B9BY,YAAAA,OAAO,CAACnB,IAAR,GAAesB,oBAAf;AA7B8B,6CA+BvB3E,eAAe,CAAC6D,0BAAhB,CAA2CY,OAAO,CAACrB,WAAnD,EAAgE5B,KAAhE,EAAuEuC,IAAvE,CAA4E,UAACC,GAAD,EAAS;AAC1FQ,cAAAA,OAAO,CAACpB,WAAR,GAAsBY,GAAtB,CAD0F,CAG1F;AACA;AACA;;AACAQ,cAAAA,OAAO,CAACK,cAAR,GAAyB,IAAzB;AAEA,qBAAO,iBAAQC,OAAR,CAAgBN,OAAhB,CAAP;AACD,aATM,CA/BuB;;AAAA;AAAA,iBA0CvBC,OAAO,CAACf,IA1Ce;AAAA;AAAA;AAAA;;AA2C9Bc,YAAAA,OAAO,CAACnB,IAAR,GAAeuB,6BAAf;AA3C8B;AAAA;AAAA,mBA6CtBpD,KAAK,CAACE,QAAN,CAAeC,QAAf,CAAwBoD,cAAxB,CAAuC,UAAvC,CA7CsB;;AAAA;AA+CtBC,YAAAA,eA/CsB,GA+CJxD,KAAK,CAACE,QAAN,CAAeuD,YAAf,CAA4BC,mBAA5B,CAAgD;AACtE3B,cAAAA,OAAO,EAAEkB,OAAO,CAAClB,OADqD;AAEtED,cAAAA,EAAE,EAAEmB,OAAO,CAACrB;AAF0D,aAAhD,CA/CI;AAoD5BoB,YAAAA,OAAO,CAACpB,WAAR,GAAsB4B,eAAtB;AApD4B;AAAA;;AAAA;AAAA;AAAA;;AAuD5BvE,iCAAYC,MAAZ,CAAmBF,KAAnB;;AAvD4B;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBA4DxB,IAAI2D,kBAAJ,CAAmB,yHAAnB,CA5DwB;;AAAA;AAAA,6CA+DzB,iBAAQW,OAAR,CAAgBN,OAAhB,CA/DyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlC;;AAAA;AAAA;AAAA;AAAA;AAkEA;;;;;;;;AAMAxE,eAAe,CAACmF,cAAhB,GAAiC,UAAC9B,IAAD,EAAOxC,KAAP,EAAiB;AAChD,MAAIuE,QAAQ,cAAOC,eAAP,cAAeC,sBAAf,CAAZ;AACA,MAAIC,MAAM,GAAGC,sBAAWC,GAAxB;AACA,MAAIC,GAAG,GAAG,IAAV;;AAEA,UAAQrC,IAAR;AACE,SAAKsB,oBAAL;AACA,SAAKgB,0BAAL;AACA,SAAKC,uBAAL;AACER,MAAAA,QAAQ,cAAOC,eAAP,cAAeC,sBAAf,cAA8BzE,KAA9B,cAAuCgF,eAAvC,cAA+CxC,IAA/C,cAAuDyC,+BAAvD,CAAR;AACA;;AACF,SAAKlB,6BAAL;AACEW,MAAAA,MAAM,GAAGC,sBAAWO,GAApB;AACA;;AACF,SAAKC,qBAAL;AACEN,MAAAA,GAAG,aAAM7E,KAAN,cAAeyE,sBAAf,CAAH;AACAC,MAAAA,MAAM,GAAGC,sBAAWO,GAApB;AACA;;AACF,SAAKrB,yBAAL;AACEU,MAAAA,QAAQ,eAAQC,eAAR,cAAgBC,sBAAhB,cAA+B,mBAAKzE,KAAL,CAA/B,cAA8CgF,eAA9C,cAAsDnB,yBAAtD,cAAwEoB,+BAAxE,CAAR;AACA;;AACF;AAhBF;;AAmBA,SAAO;AACLJ,IAAAA,GAAG,EAAHA,GADK;AAELN,IAAAA,QAAQ,EAARA,QAFK;AAGLG,IAAAA,MAAM,EAANA;AAHK,GAAP;AAKD,CA7BD;;AA+BAvF,eAAe,CAACiG,gBAAhB,GAAmC,UAACC,eAAD,EAAkB7C,IAAlB,EAAwBxC,KAAxB,EAA+BsF,GAA/B,EAAuC;AACxE,MAAIC,aAAa,GAAG;AAClBb,IAAAA,MAAM,EAAEW,eAAe,CAACX,MADN;AAElBY,IAAAA,GAAG,EAAHA,GAFkB;AAGlBf,IAAAA,QAAQ,EAAEc,eAAe,CAACd;AAHR,GAApB;;AAMA,MAAIc,eAAe,CAACX,MAAhB,KAA2BC,sBAAWC,GAA1C,EAA+C;AAC7C;AACAW,IAAAA,aAAa,CAAChB,QAAd,GAAyBgB,aAAa,CAAChB,QAAd,CAAuBiB,MAAvB,YAAkCC,kCAAlC,EAAzB;AACD,GAHD,MAKA,IAAIjD,IAAI,KAAK2C,qBAAb,EAAyB;AACvB;AACAI,IAAAA,aAAa,CAAChB,QAAd,GAAyBgB,aAAa,CAAChB,QAAd,CAAuBiB,MAAvB,YAAkCC,kCAAlC,EAAzB;AACAF,IAAAA,aAAa,CAACG,IAAd,GAAqB;AACnB1F,MAAAA,KAAK,EAALA,KADmB;AAEnB2F,MAAAA,UAAU,EAAEnD;AAFO,KAArB;AAID,GAPD,MAQK,IAAIA,IAAI,KAAK2C,qBAAb,EAAyB;AAC5BI,IAAAA,aAAa,GAAG;AACdb,MAAAA,MAAM,EAAEW,eAAe,CAACX,MADV;AAEdG,MAAAA,GAAG,EAAEQ,eAAe,CAACR;AAFP,KAAhB;AAID;;AAED,SAAOU,aAAP;AACD,CA5BD;;eA8BepG,e","sourcesContent":["import url from 'url';\n\nimport btoa from 'btoa';\nimport {\n  deconstructHydraId\n} from '@webex/common';\n\nimport ParameterError from '../common/errors/parameter';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {\n  _SIP_URI_,\n  _PERSONAL_ROOM_,\n  _MEETING_ID_,\n  _CONVERSATION_URL_,\n  _LOCUS_ID_,\n  _MEETING_LINK_,\n  _PEOPLE_,\n  _ROOM_,\n  HTTP_VERBS,\n  USE_URI_LOOKUP_FALSE,\n  TYPE,\n  LOCI,\n  MEETINGINFO,\n  ALTERNATE_REDIRECT_TRUE,\n  DIALER_REGEX,\n  WEBEX_DOT_COM,\n  CONVERSATION_SERVICE,\n  WWW_DOT,\n  JOIN,\n  MEET,\n  MEET_M,\n  HTTPS_PROTOCOL,\n  UUID_REG\n} from '../constants';\n\nconst MeetingInfoUtil = {};\n\nMeetingInfoUtil.getParsedUrl = (link) => {\n  try {\n    let parsedUrl = url.parse(link);\n\n    if (!parsedUrl) {\n      return false;\n    }\n    // hack for links such as <company>.webex.com/meet/<user> without a protocol\n    if (!parsedUrl.protocol) {\n      parsedUrl = url.parse(`${HTTPS_PROTOCOL}${link}`);\n    }\n\n    return parsedUrl;\n  }\n  catch (error) {\n    LoggerProxy.logger.warn(`Meeting-info:util#getParsedUrl --> unable to parse the URL, error: ${error}`);\n\n    return null;\n  }\n};\n\n/**\n * Helper function to check if a string matches a known meeting link pattern\n * @param {String} value  string to parse and see if it matches a meeting link\n * @returns {Boolean}\n */\nMeetingInfoUtil.isMeetingLink = (value) => {\n  const parsedUrl = MeetingInfoUtil.getParsedUrl(value);\n  const hostNameBool = parsedUrl.hostname && parsedUrl.hostname.includes(WEBEX_DOT_COM);\n  const pathNameBool = parsedUrl.pathname && (parsedUrl.pathname.includes(`/${MEET}`) || parsedUrl.pathname.includes(`/${MEET_M}`) || parsedUrl.pathname.includes(`/${JOIN}`));\n\n  return hostNameBool && pathNameBool;\n};\n\nMeetingInfoUtil.isConversationUrl = (value, webex) => {\n  const clusterId = webex.internal.services.getClusterId(value);\n\n  if (clusterId) {\n    return clusterId.endsWith(CONVERSATION_SERVICE);\n  }\n\n  return false;\n};\n\nMeetingInfoUtil.convertLinkToSip = (value) => {\n  const parsedUrl = MeetingInfoUtil.getParsedUrl(value);\n\n  if (!parsedUrl) {\n    return null;\n  }\n  let user;\n\n  if (parsedUrl.pathname) {\n    const userIndex = parsedUrl.pathname.lastIndexOf('/');\n\n    user = parsedUrl.pathname.substring(userIndex + 1);\n  }\n  if (!user) {\n    return null;\n  }\n  let company;\n\n  if (parsedUrl.hostname) {\n    const companyIndex = parsedUrl.hostname.lastIndexOf(`.${WEBEX_DOT_COM}`);\n\n    company = parsedUrl.hostname.substring(0, companyIndex).replace(WWW_DOT, '');\n  }\n  if (!company) {\n    return null;\n  }\n\n  return `${user}@${company}.${WEBEX_DOT_COM}`;\n};\n\n\nMeetingInfoUtil.isSipUri = (sipString) => {\n  // TODO: lets remove regex from this equation and user URI matchers and such\n  // have not found a great sip uri parser library as of now\n  const sipUri = DIALER_REGEX.SIP_ADDRESS.exec(sipString);\n\n  return sipUri;\n};\n\nMeetingInfoUtil.isPhoneNumber = (phoneNumber) => {\n  const isValidNumber = DIALER_REGEX.PHONE_NUMBER.test(phoneNumber);\n\n  return isValidNumber;\n};\n\nMeetingInfoUtil.getHydraId = (destination) => {\n  const {type, id, cluster} = deconstructHydraId(destination);\n\n  if (id && UUID_REG.test(id)) {\n    if (type === _ROOM_) {\n      return {room: true, destination: id, cluster};\n    }\n    if (type === _PEOPLE_) {\n      return {people: true, destination: id, cluster};\n    }\n\n    return {};\n  }\n\n  return {};\n};\n\nMeetingInfoUtil.getSipUriFromHydraPersonId = (destination, webex) => webex.people.get(destination).then((res) => {\n  if (res.emails && res.emails.length) {\n    return res.emails[0];\n  }\n  throw new ParameterError('Hydra Id Lookup was an invalid hydra person id.');\n}).catch((err) => {\n  LoggerProxy.logger.error(`Meeting-info:util#MeetingInfoUtil.getSipUriFromHydraPersonId --> getSipUriFromHydraPersonId ${err} `);\n  throw err;\n});\n\nMeetingInfoUtil.generateOptions = async (from) => {\n  const {destination, type, webex} = from;\n\n  if (type) {\n    return {\n      destination,\n      type\n    };\n  }\n  const options = {};\n  const hydraId = MeetingInfoUtil.getHydraId(destination);\n\n  if (MeetingInfoUtil.isMeetingLink(destination)) {\n    options.type = _MEETING_LINK_;\n    options.destination = destination;\n  }\n  else if (MeetingInfoUtil.isSipUri(destination)) {\n    options.type = _SIP_URI_;\n    options.destination = destination;\n  }\n  else if (MeetingInfoUtil.isPhoneNumber(destination)) {\n    options.type = _SIP_URI_;\n    options.destination = destination;\n  }\n  else if (MeetingInfoUtil.isConversationUrl(destination, webex)) {\n    options.type = _CONVERSATION_URL_;\n    options.destination = destination;\n  }\n  else if (hydraId.people) {\n    options.type = _SIP_URI_;\n\n    return MeetingInfoUtil.getSipUriFromHydraPersonId(hydraId.destination, webex).then((res) => {\n      options.destination = res;\n\n      // Since hydra person ids require a unique case in which they are\n      // entirely converted to a SIP URI, we need to set a flag for detecting\n      // this type of destination.\n      options.wasHydraPerson = true;\n\n      return Promise.resolve(options);\n    });\n  }\n  else if (hydraId.room) {\n    options.type = _CONVERSATION_URL_;\n    try {\n      await webex.internal.services.waitForCatalog('postauth');\n\n      const conversationUrl = webex.internal.conversation.getUrlFromClusterId({\n        cluster: hydraId.cluster,\n        id: hydraId.destination\n      });\n\n      options.destination = conversationUrl;\n    }\n    catch (e) {\n      LoggerProxy.logger.error(`Meeting-info:util#generateOptions --> ${e}`);\n      throw (e);\n    }\n  }\n  else {\n    throw new ParameterError('MeetingInfo is fetched with meeting link, sip uri, phone number, hydra room id, hydra people id, or a conversation url.');\n  }\n\n  return Promise.resolve(options);\n};\n\n/**\n * Helper function to build up a correct locus url depending on the value passed\n * @param {String} type One of [SIP_URI, PERSONAL_ROOM, MEETING_ID, CONVERSATION_URL, LOCUS_ID, MEETING_LINK]\n * @param {Object} value ?? value.value\n * @returns {Object} returns an object with {resource, method}\n */\nMeetingInfoUtil.getResourceUrl = (type, value) => {\n  let resource = `/${LOCI}/${MEETINGINFO}`;\n  let method = HTTP_VERBS.GET;\n  let uri = null;\n\n  switch (type) {\n    case _SIP_URI_:\n    case _PERSONAL_ROOM_:\n    case _MEETING_ID_:\n      resource = `/${LOCI}/${MEETINGINFO}/${value}?${TYPE}=${type}&${USE_URI_LOOKUP_FALSE}`;\n      break;\n    case _CONVERSATION_URL_:\n      method = HTTP_VERBS.PUT;\n      break;\n    case _LOCUS_ID_:\n      uri = `${value}/${MEETINGINFO}`;\n      method = HTTP_VERBS.PUT;\n      break;\n    case _MEETING_LINK_:\n      resource = `$/${LOCI}/${MEETINGINFO}/${btoa(value)}?${TYPE}=${_MEETING_LINK_}&${USE_URI_LOOKUP_FALSE}`;\n      break;\n    default:\n  }\n\n  return {\n    uri,\n    resource,\n    method\n  };\n};\n\nMeetingInfoUtil.getRequestParams = (resourceOptions, type, value, api) => {\n  let requestParams = {\n    method: resourceOptions.method,\n    api,\n    resource: resourceOptions.resource\n  };\n\n  if (resourceOptions.method === HTTP_VERBS.GET) {\n    // for handling URL redirections\n    requestParams.resource = requestParams.resource.concat(`&${ALTERNATE_REDIRECT_TRUE}`);\n  }\n  else\n  if (type !== _LOCUS_ID_) {\n    // locus id check is a PUT not sure why\n    requestParams.resource = requestParams.resource.concat(`?${ALTERNATE_REDIRECT_TRUE}`);\n    requestParams.body = {\n      value,\n      lookupType: type\n    };\n  }\n  else if (type === _LOCUS_ID_) {\n    requestParams = {\n      method: resourceOptions.method,\n      uri: resourceOptions.uri\n    };\n  }\n\n  return requestParams;\n};\n\nexport default MeetingInfoUtil;\n"]}