{"version":3,"sources":["index.js"],"names":["pc","insertBandwidthLimit","sdpLines","index","limit","periodicKeyFrame","search","AUDIO","StaticConfig","meetings","bandwidth","audio","video","SDP","PERIODIC_KEYFRAME","splice","B_LINE","setMaxFs","sdp","level","QUALITY_LEVELS","HIGH","MAX_FRAMESIZES","ParameterError","replaceSdp","maxFsLine","MAX_FS","replace","checkH264Support","videoPresent","match","h264Present","validateSdp","parsedSdp","sdpTransform","parse","media","forEach","mediaLine","candidates","length","LoggerProxy","logger","error","BAD_MEDIA_PORTS","includes","port","icePwd","iceUfrag","limitBandwidth","offerSdp","split","CARRIAGE_RETURN","i","M_LINE","join","setContentSlides","screenPc","A_CONTENT_SLIDES","iceCandidate","peerConnection","remoteQualityLevel","resolve","timeout","setTimeout","localDescription","RETRY_TIMEOUT","ICE_TIMEOUT","onicecandidate","evt","candidate","clearTimeout","replaceTrack","track","senders","getSenders","sender","kind","err","addStream","stream","bowser","msedge","tracksPresent","find","getTracks","addTrack","setRemoteSessionDetails","typeStr","remoteSdp","meetingId","log","signalingState","Metrics","postEvent","event","eventType","REMOTE_SDP_RECEIVED","data","canProceed","errors","generateErrorPayload","name","MEDIA_ENGINE","HAVE_LOCAL_OFFER","STABLE","OFFER","setRemoteDescription","window","RTCSessionDescription","type","then","remoteDescription","catch","metricName","METRICS_OPERATIONAL_MEASURES","PEERCONNECTION_FAILURE","correlation_id","reason","message","stack","metadata","sendOperationalMetric","reject","MediaError","createOffer","enableRtx","description","setLocalDescription","LOCAL_SDP_GENERATED","close","rollBackLocalDescription","ROLLBACK","updatePeerConnection","params","createAnswer","peerconnection","HAVE_REMOTE_OFFER","sdpConstraints","answer","connectionState","PEER_CONNECTION_STATE","CLOSED","setPeerConnectionEvents","meeting","mediaProperties","connectionFailed","reconnectionManager","iceState","reconnect","networkDisconnect","ICE_END","oniceconnectionstatechange","info","iceConnectionState","ICE_STATE","CHECKING","ICE_START","COMPLETED","CONNECTED","setNetworkStatus","NETWORK_STATUS","iceReconnected","DISCONNECTED","waitForIceReconnect","FAILED","onconnectionstatechange","CONNECTION_STATE","NEW","CONNECTING"],"mappings":"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","sourcesContent":["/* eslint-disable */\n// We need to figure out how to pass a webex logger instance to these util files\n\n/* globals window, RTCSessionDescription */\n\nimport bowser from 'bowser';\nimport sdpTransform from 'sdp-transform'; // https://github.com/clux/sdp-transform\n\nimport Metrics from '../metrics';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport StaticConfig from '../common/config';\nimport {\n  RETRY_TIMEOUT,\n  ICE_TIMEOUT,\n  AUDIO,\n  SDP,\n  ICE_STATE,\n  CONNECTION_STATE,\n  NETWORK_STATUS,\n  PEER_CONNECTION_STATE,\n  OFFER,\n  QUALITY_LEVELS,\n  MAX_FRAMESIZES,\n  METRICS_OPERATIONAL_MEASURES\n} from '../constants';\n\nimport {error, eventType} from '../metrics/config'\n\nimport MediaError from '../common/errors/media';\nimport ParameterError from '../common/errors/parameter';\n\n/**\n * @export\n * @public\n */\nconst pc = {};\n\n/**\n * munges the bandwidth limit into the sdp\n * @param {String} sdpLines\n * @param {Number} index\n * @returns {String}\n */\nconst insertBandwidthLimit = (sdpLines, index) => {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert to sdp parser\n  let limit;\n  let periodicKeyFrame = '';\n  if (sdpLines[index].search(AUDIO) !== -1) {\n    limit = StaticConfig.meetings.bandwidth.audio;\n  } else {\n    limit = StaticConfig.meetings.bandwidth.video;\n    periodicKeyFrame = SDP.PERIODIC_KEYFRAME\n    sdpLines.splice(index + 2, 0, periodicKeyFrame);\n  }\n  sdpLines.splice(index + 1, 0, `${SDP.B_LINE}:${limit}`);\n  return sdpLines;\n};\n\n/**\n * needed for calliope max-fs\n * @param {String} sdp\n * @param {String} [level=QUALITY_LEVELS.HIGH] quality level for max-fs\n * @returns {String}\n */\nconst setMaxFs = (sdp, level = QUALITY_LEVELS.HIGH) => {\n  if (!MAX_FRAMESIZES[level]) {\n    throw new ParameterError(`setMaxFs: unable to set max framesize, value for level \"${level}\" is not defined`)\n  }\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert with sdp parser, no munging\n  let replaceSdp = sdp;\n  const maxFsLine = `${SDP.MAX_FS}${MAX_FRAMESIZES[level]}`\n  replaceSdp = replaceSdp.replace(/(\\na=fmtp:(\\d+).*level-asymmetry-allowed=1.*)/gi, `$1;${maxFsLine}`)\n  return replaceSdp;\n};\n\n/**\n * checks that sdp has h264 codec in it\n * @param {String} sdp\n * @returns {boolean}\n */\nconst checkH264Support = (sdp) => {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert to sdp parser to read rtp.codec\n  const videoPresent = sdp.match(/\\nm=video.*/g);\n  const h264Present = sdp.match(/\\na=rtpmap:\\d+\\sH264.*/g);\n  if (videoPresent) {\n    return !!h264Present;\n  }\n  return true;\n};\n\n/**\n * validates the sdp, checks port, candidates, and ice info\n * @param {String} sdp\n * @returns {Boolean}\n */\nconst validateSdp = (sdp) => {\n  const parsedSdp = sdpTransform.parse(sdp);\n  parsedSdp.media.forEach((mediaLine) => {\n    if (mediaLine.candidates && mediaLine.candidates.length === 0) {\n      LoggerProxy.logger.error('PeerConnectionManager:index#validateSdp --> iceCandidate: Ice candadate never completed');\n      return false;\n    }\n    if (SDP.BAD_MEDIA_PORTS.includes(mediaLine.port)) {\n      LoggerProxy.logger.error('PeerConnectionManager:index#validateSdp --> iceCandidate: Found invalid port number for the ice candidate');\n      return false;\n    }\n    if (!mediaLine.icePwd || !mediaLine.iceUfrag) {\n      LoggerProxy.logger.error('PeerConnectionManager:index#validateSdp --> iceCandidate: ice ufrag and password not found');\n      return false;\n    }\n    return true;\n  });\n};\n\n/**\n * munges the bandwidth into the sdp\n * @param {String} sdp\n * @returns {String}\n */\nconst limitBandwidth = (sdp) => {\n  // TODO convert to sdp parser\n  let offerSdp = sdp;\n  let sdpLines = offerSdp.split(SDP.CARRIAGE_RETURN);\n\n  for (let i = 0; i < sdpLines.length; i += 1) {\n    if (sdpLines[i].search(SDP.M_LINE) !== -1) {\n      sdpLines = insertBandwidthLimit(sdpLines, i);\n    }\n  }\n  offerSdp = sdpLines.join(SDP.CARRIAGE_RETURN);\n  return offerSdp;\n};\n\n/**\n * makes sure the screen pc sdp has content:slides for server\n * @param {RTCPeerConnection} screenPC\n * @returns {RTCPeerConnection}\n */\npc.setContentSlides = (screenPc) => {\n  if (screenPc && screenPc.sdp) {\n    screenPc.sdp += `${SDP.A_CONTENT_SLIDES}${SDP.CARRIAGE_RETURN}`;\n  }\n  return screenPc;\n};\n\n/**\n * handles ice trickling and establishes ICE connection onto peer connection object\n * @param {Object} peerConnection\n * @param {Object} options\n * @param {String} options.remoteQualityLevel\n * @returns {RTCPeerConnection}\n */\npc.iceCandidate = (peerConnection, {remoteQualityLevel}) =>\n  new Promise((resolve) => {\n    // TODO: we dont need timeout as we can check the api state and validate.\n    const timeout = setTimeout(() => {\n      peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n      peerConnection.sdp = setMaxFs(peerConnection.sdp, remoteQualityLevel);\n      peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n\n      if (!validateSdp(peerConnection.sdp)) {\n        setTimeout(() => {\n          resolve(peerConnection);\n        }, RETRY_TIMEOUT);\n      } else {\n        resolve(peerConnection);\n      }\n    }, ICE_TIMEOUT);\n\n    peerConnection.onicecandidate = (evt) => {\n      if (!evt.candidate && !peerConnection.sdp) {\n        peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n        peerConnection.sdp = setMaxFs(peerConnection.sdp, remoteQualityLevel);\n        peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n\n        if (evt.candidate === null) {\n          validateSdp(peerConnection.sdp);\n          clearTimeout(timeout);\n          resolve(peerConnection);\n        }\n      }\n    };\n  });\n\n/**\n * swapping tracks\n * @param {Object} peerConnection\n * @param {Object} track\n * @returns {undefined}\n */\npc.replaceTrack = (peerConnection, track) => {\n  try {\n    const senders = peerConnection.getSenders();\n    if (senders.length > 0) {\n      senders.forEach((sender) => {\n        if (sender.track && sender.track.kind === track.kind) {\n          sender.replaceTrack(track);\n        }\n      });\n    }\n  } catch (err) {\n    LoggerProxy.logger.error(`PeerConnectionManager:index#replaceTrack --> Error replacing track, ${err}`);\n  }\n};\n\n/**\n * adding streams to peerConnection\n * @param {Object} peerConnection\n * @param {Object} stream\n * @returns {undefined}\n */\npc.addStream = (peerConnection, stream) => {\n  try {\n    if (stream && !bowser.msedge) {\n      const tracksPresent = peerConnection.getSenders && peerConnection.getSenders().find((sender) => sender.track != null);\n      if (tracksPresent) {\n        stream.getTracks().forEach((track) => {\n          pc.replaceTrack(peerConnection, track);\n        });\n        return;\n      }\n      stream.getTracks().forEach((track) => {\n        peerConnection.addTrack(track, stream);\n      });\n      // // TODO : may come back disable addTracks for chrome they are moving back to addStream\n      // // https://bugs.chromium.org/p/chromium/issues/detail?id=764414\n      // // https://bugs.chromium.org/p/chromium/issues/detail?id=738918#c7\n      //   peerConnection.addStream(stream);\n    } else if (bowser.msedge) {\n      peerConnection.addStream(stream);\n    } else {\n    }\n  } catch (err) {\n    LoggerProxy.logger.error(`PeerConnectionManager:index#addStream --> Error adding stream, error: ${error}`);\n  }\n};\n\n/**\n * setting the remote description\n * @param {Object} peerConnection\n * @param {String} typeStr\n * @param {String} remoteSdp\n * @param {String} meetingId\n * @returns {undefined}\n */\npc.setRemoteSessionDetails = (peerConnection, typeStr, remoteSdp, meetingId) => {\n  LoggerProxy.logger.log(`PeerConnectionManager:index#setRemoteSessionDetails --> Setting the remote description type: ${typeStr}State: ${peerConnection.signalingState}`);\n  let sdp = remoteSdp;\n\n  sdp = sdp.replace(/\\na=extmap.*/g, '');\n\n  // making sure that the remoteDescription is only set when there is a answer for offer\n  // or there is a offer from the server\n\n  if(!sdp) {\n    Metrics.postEvent({\n      event: eventType.REMOTE_SDP_RECEIVED,\n      meetingId: meetingId, data: {\n      canProceed: false,\n      errors: [Metrics.generateErrorPayload(2001, true,\n        error.name.MEDIA_ENGINE, 'missing remoteSdp')]\n    }})\n  }\n  if (peerConnection.signalingState === SDP.HAVE_LOCAL_OFFER || (peerConnection.signalingState === SDP.STABLE && typeStr === SDP.OFFER)) {\n    return peerConnection.setRemoteDescription(\n        new window.RTCSessionDescription({\n          type: typeStr,\n          sdp\n        })\n      )\n      .then(() => {\n        if (!peerConnection.remoteDescription) {\n          return Metrics.postEvent({\n            event: eventType.REMOTE_SDP_RECEIVED,\n            meetingId: meetingId\n          });\n        }\n      })\n      .catch((error) =>  {\n        LoggerProxy.logger.error(`Peer-connection-manager:index#setRemoteDescription --> ${error} missing remotesdp`);\n\n\n        const metricName = METRICS_OPERATIONAL_MEASURES.PEERCONNECTION_FAILURE;\n        const data = {\n          correlation_id: meetingId,\n          reason: error.message,\n          stack: error.stack,\n        };\n        const metadata = {\n          type: error.name\n        };\n\n        Metrics.sendOperationalMetric(metricName, data, metadata);\n\n        return Metrics.postEvent({\n          event: eventType.REMOTE_SDP_RECEIVED,\n          meetingId: meetingId,\n          data: {\n            canProceed: false,\n            errors: [Metrics.generateErrorPayload(2001, true,\n            error.name.MEDIA_ENGINE, 'missing remoteSdp')]\n          }\n        });\n      })\n  }\n\n    return Promise.reject(new MediaError('PeerConnection in wrong state'));\n};\n\n/**\n * create offer with a valid paramater\n * @param {Object} params\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @returns {RTCPeerConnection}\n */\npc.createOffer = (peerConnection, {meetingId, remoteQualityLevel, enableRtx}) => {\n  LoggerProxy.logger.log('PeerConnectionManager:index#createOffer --> creating a new offer');\n\n    return peerConnection\n      .createOffer()\n      .then((description) => {\n        // bug https://bugs.chromium.org/p/chromium/issues/detail?id=1020642\n        // chrome currently generates RTX line irrespective of weither the server side supports it\n        // we are removing apt as well because its associated with rtx line\n\n        if(!enableRtx) {\n          description.sdp = description.sdp.replace(/\\r\\na=rtpmap:\\d+ rtx\\/\\d+/g, '');\n          description.sdp = description.sdp.replace(/\\r\\na=fmtp:\\d+ apt=\\d+/g, '');\n        }\n\n        return peerConnection.setLocalDescription(description)\n      })\n      .then(() => pc.iceCandidate(peerConnection, {remoteQualityLevel}))\n      .then(() => {\n        peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n        peerConnection.sdp = setMaxFs(peerConnection.sdp, remoteQualityLevel);\n        if (!checkH264Support(peerConnection.sdp)) {\n          throw new MediaError('openH264 is downloading please Wait. Upload logs if not working on second try');\n        }\n        peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n        pc.setContentSlides(peerConnection);\n\n        Metrics.postEvent({\n          event: eventType.LOCAL_SDP_GENERATED,\n          meetingId\n        });\n        return peerConnection;\n      })\n      .catch((error) => {\n        LoggerProxy.logger.error(`Peer-connection-manager:index#createOffer --> ${error}`);\n\n        const metricName = METRICS_OPERATIONAL_MEASURES.PEERCONNECTION_FAILURE;\n        const data = {\n          correlation_id: meetingId,\n          reason: error.message,\n          stack:error.stack\n        };\n        const metadata = {\n          type: error.name\n        };\n\n        Metrics.sendOperationalMetric(metricName, data, metadata);\n\n\n        Metrics.postEvent({\n          event: eventType.LOCAL_SDP_GENERATED,\n          meetingId,\n          data: {\n            canProceed: false,\n             errors: [\n               Metrics.generateErrorPayload(2001, true,\n              error.name.MEDIA_ENGINE)]\n        }});\n        pc.close(peerConnection);\n        throw error;\n      });\n};\n\n/**\n * rollBack local description in peerconnection\n * @param {Object} peerConnection\n * @returns {RTCPeerConnection}\n */\npc.rollBackLocalDescription = (peerConnection) => {\n  return peerConnection\n    .setLocalDescription(new RTCSessionDescription({type: SDP.ROLLBACK}))\n    .then(() => peerConnection)\n    .catch((err) => {\n      LoggerProxy.logger.error(`Peer-connection-manager:index#setLocalDescription --> ${err} `);\n      return Promise.error(err);\n    });\n};\n\n/**\n * @param {Object} params {\n * @param {Boolean} params.offerToReceiveAudio\n * @param {Boolean} params.offerToReceiveVideo\n * @param {string} params.offerSdp\n * @param {MediaStream} params.stream\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @returns {Promise.<Array>} [MediaSDP, ScreenSDP]\n */\npc.updatePeerConnection = (params, {meetingId, remoteQualityLevel}) => {\n  LoggerProxy.logger.log(`PeerConnectionManager:index#updatePeerConnection --> updating the peerConnection with params: ${params}`);\n\n  const {peerConnection, offerSdp} = params;\n\n  return pc.createAnswer({\n    peerConnection,\n      offerSdp: offerSdp[0]\n    }, {meetingId, remoteQualityLevel}).then((peerconnection) => {\n      // The content slides should also be set when we are sending inactive\n      pc.setContentSlides(peerconnection);\n    return Promise.resolve([peerconnection.sdp]);\n  });\n};\n\n/**\n * @param {Object} params\n * @param {Object} params.peerConnection\n * @param {Object} params.sdpConstraints\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @returns {RTCPeerConnection} peerConnection\n */\npc.createAnswer = (params, {meetingId, remoteQualityLevel}) => {\n  const {peerConnection} = params;\n\n  // TODO: Some times to many mercury event comes at the same time\n  // Need to maintain state of peerconnection\n  if (peerConnection.signalingState === SDP.HAVE_REMOTE_OFFER) {\n    return Promise.resolve(peerConnection);\n  }\n\n  return pc.setRemoteSessionDetails(peerConnection, OFFER, params.offerSdp, meetingId)\n    .then(() => peerConnection.createAnswer(params.sdpConstraints))\n    .then((answer) =>\n\n      peerConnection.setLocalDescription(answer)\n    )\n    .then(() => pc.iceCandidate(peerConnection, {remoteQualityLevel}))\n    .then(() => {\n      peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n      peerConnection.sdp = setMaxFs(peerConnection.sdp, remoteQualityLevel);\n      if (!checkH264Support(peerConnection.sdp)) {\n        throw new MediaError('openH264 is downloading please Wait. Upload logs if not working on second try');\n      }\n\n      peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n\n      return peerConnection;\n    })\n    .catch((error) => {\n      const metricName = METRICS_OPERATIONAL_MEASURES.PEERCONNECTION_FAILURE;\n      const data = {\n        correlation_id: meetingId,\n        reason: error.message,\n        stack:error.stack\n      };\n      const metadata = {\n        type: error.name\n      };\n\n      Metrics.sendOperationalMetric(metricName, data, metadata);\n      LoggerProxy.logger.error(`PeerConnectionManager:index#setRemoteSessionDetails --> Error creating remote session, error: ${error}`);\n    });\n};\n\n/**\n * shut down the peer connection\n * @param {Object} peerConnection\n * @returns {undefined}\n */\npc.close = (peerConnection) => {\n  // peerConnection.close() fails on firefox on network changes and gives a Dom exception\n  // To avoid this we have added a try catch block.\n  // Please refer to https://bugzilla.mozilla.org/show_bug.cgi?id=1274407 for more information\n\n  if(peerConnection && peerConnection.connectionState === PEER_CONNECTION_STATE.CLOSED) {\n    return Promise.resolve();\n  }\n  LoggerProxy.logger.log('PeerConnectionManager:index#close --> pc: close() -> closing the mediaPeerConnection');\n  return Promise.resolve()\n    .then(() => {\n      if (peerConnection && peerConnection.close) {\n        peerConnection.close();\n      }\n    });\n};\n\n\npc.setPeerConnectionEvents = (meeting) => {\n  // In case ICE fail\n  const {peerConnection} = meeting.mediaProperties;\n\n  const connectionFailed = () => {\n    if (meeting.reconnectionManager.iceState.resolve) {\n      // DISCONNECTED state triggers first then it goes to FAILED STATE\n      // sometimes the failed state can happen before 10 seconds (Which is the timer for the reconnect for ice disconnect)\n      meeting.reconnectionManager.iceState.resolve();\n    }\n\n    meeting.reconnect({networkDisconnect: true});\n    Metrics.postEvent({\n      event: eventType.ICE_END,\n      meeting,\n      data: {\n        canProceed: false,\n        errors: [\n          Metrics.generateErrorPayload(\n            2004, false, error.name.MEDIA_ENGINE\n          )]\n      }\n    });\n  };\n\n  peerConnection.oniceconnectionstatechange = () => {\n    LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE CHANGE.');\n    switch (peerConnection.iceConnectionState) {\n      case ICE_STATE.CHECKING:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE CHECKING.');\n        Metrics.postEvent({event: eventType.ICE_START, meeting});\n        break;\n      case ICE_STATE.COMPLETED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE COMPLETED.');\n        break;\n      case ICE_STATE.CONNECTED:\n        // Ice connection state goes to connected when both client and server sends STUN packets and\n        // Established connected between them. Firefox does not trigger COMPLETED and only trigger CONNECTED\n        Metrics.postEvent({event: eventType.ICE_END, meeting});\n        meeting.setNetworkStatus(NETWORK_STATUS.CONNECTED);\n        meeting.reconnectionManager.iceReconnected();\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE CONNECTED.');\n        break;\n      case ICE_STATE.CLOSED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE CLOSED.');\n        break;\n      case ICE_STATE.DISCONNECTED:\n        meeting.setNetworkStatus(NETWORK_STATUS.DISCONNECTED);\n        meeting.reconnectionManager.waitForIceReconnect()\n          .catch(() => {\n            LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE DISCONNECTED. Automatic Reconnection Timed Out.');\n\n            connectionFailed();\n          });\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE DISCONNECTED.');\n        break;\n      case ICE_STATE.FAILED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE FAILED.');\n        // notify of ice failure\n        // Ice failure is the only indicator currently for identifying the actual connection drop\n        // Firefox takes sometime 10-15 seconds to go to failed state\n        connectionFailed();\n        break;\n      default:\n        break;\n    }\n  };\n\n  peerConnection.onconnectionstatechange = () => {\n    LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE CHANGE.');\n    switch (peerConnection.connectionState) {\n      case CONNECTION_STATE.NEW:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE NEW.');\n        break;\n      case CONNECTION_STATE.CONNECTING:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE CONNECTING.');\n        break;\n      case CONNECTION_STATE.CONNECTED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE CONNECTED.');\n        break;\n      case CONNECTION_STATE.CLOSED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE CLOSED.');\n        break;\n      case CONNECTION_STATE.DISCONNECTED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE DISCONNECTED.');\n        break;\n      case CONNECTION_STATE.FAILED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE FAILED.');\n        // Special case happens only on chrome where there is no ICE FAILED event\n        // only CONNECTION FAILED event gets triggred\n\n        connectionFailed();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\nexport default pc;\n"]}