{"version":3,"sources":["index.js"],"names":["StatsAnalyzer","config","statsResults","defaultStats","result","type","isSender","id","RemoteCandidateType","RemoteTransport","RemoteIpAddress","RemoteNetworkType","sendRecvType","candidateType","indexOf","push","transport","ipAddress","portNumber","networkType","internal","candidates","priority","timestamp","connectionType","remote","totalRoundTripTime","bytesReceived","bytesSent","packetsReceived","packetsSent","currentRoundTripTime","availableOutgoingBitrate","availableIncomingBitrate","statsStarted","correlationId","mqaSentCount","lastMqaDataSent","resolutions","video","send","recv","audio","share","audioReceiver","mqaData","intervals","audioReceive","audioSender","audioTransmit","videoReceiver","videoReceive","videoSender","videoTransmit","shareSender","shareReceiver","isShareStream","intervalNumber","JSON","parse","emit","file","function","EVENT_TRIGGERS","MEDIA_QUALITY","peerConnection","getStatsAndParse","statsInterval","setInterval","analyzerInterval","sendMqaData","mqaInterval","MQA_INTEVAL","clearInterval","statsInterva","undefined","getStatsResult","processOutboundRTPResult","processInboundRTPResult","processTrackResult","compareSentAndReceived","remotecandidate","getStatsResults","types","DEFAULT_GET_STATS_FILTER","forEach","includes","parseGetStatsResult","connectionState","CONNECTION_STATE","FAILED","LoggerProxy","logger","trace","videoTransceiver","sender","getStats","then","res","filterAndParseGetStatsResults","STATS","VIDEO_CORRELATE","receiver","audioTransceiver","AUDIO_CORRELATE","shareTransceiver","SHARE_CORRELATE","mediaType","sendrecvType","kilobytes","prevBytesSent","framesEncoded","keyFramesEncoded","bytes","availableBandwidth","toFixed","outboundRtpId","totalPacketsSent","log","totalKeyFramesEncoded","totalNackCount","nackCount","totalPliCount","pliCount","totalFirCount","firCount","encoderImplementation","qualityLimitationReason","qualityLimitationResolutionChanges","retransmittedPacketsSent","totalBytesSent","headerBytesSent","retransmittedBytesSent","prevBytesReceived","packetsLost","totalPacketsReceived","lastPacketReceivedTimestamp","currentPacketsLost","info","currentPacketLossRatio","totalPacketsLost","framesDecoded","keyFramesDecoded","totalSamplesReceived","totalSamplesDecoded","decoderImplementation","fecPacketsDiscarded","fecPackets","fecPacketsReceived","totalBytesReceived","headerBytesReceived","jitter","remoteSource","frameWidth","frameHeight","width","height","framesSent","hugeFramesSent","framesReceived","framesDropped","trackIdentifier","jitterBufferDelay","jitterBufferEmittedCount","avgJitterDelay","totalPacketsLostOnReceiver","currentPacketLoss","packetsLostOnReceiver","roundTripTime","ssrc","reportsReceived","overAllPacketLossRatio","maxPacketLossRatio","videoPacketLossRatioThreshold","MEETING_HIGH_PACKETLOSS","packetLossRatio","EventsScope"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;;;;;AAQA;;;;;;;;;;AAUA;;;;;;;IAOqBA,a;;;;;AACnB;;;;;;;AAOA,yBAAYC,MAAZ,EAAiD;AAAA;;AAAA,QAA7BC,YAA6B,uEAAdC,eAAc;AAAA;AAC/C;AAD+C,kGAsZ/B,UAACC,MAAD,EAASC,IAAT,EAAeC,QAAf,EAA4B;AAC5C,UAAI,CAACF,MAAD,IAAW,CAACA,MAAM,CAACG,EAAvB,EAA2B;AACzB;AACD;;AACD,UAAMC,mBAAmB,GAAG,EAA5B;AACA,UAAMC,eAAe,GAAG,EAAxB;AACA,UAAMC,eAAe,GAAG,EAAxB;AACA,UAAMC,iBAAiB,GAAG,EAA1B;AAEA,UAAI,CAACP,MAAM,CAACG,EAAZ,EAAgB;AAEhB,UAAMK,YAAY,GAAGN,QAAQ,GAAG,MAAH,GAAY,MAAzC;;AAEA,UAAI,CAACE,mBAAmB,CAACJ,MAAM,CAACG,EAAR,CAAxB,EAAqC;AACnCC,QAAAA,mBAAmB,CAACJ,MAAM,CAACG,EAAR,CAAnB,GAAiC,EAAjC;AACD;;AAED,UAAI,CAACE,eAAe,CAACL,MAAM,CAACG,EAAR,CAApB,EAAiC;AAC/BE,QAAAA,eAAe,CAACL,MAAM,CAACG,EAAR,CAAf,GAA6B,EAA7B;AACD;;AAED,UAAI,CAACG,eAAe,CAACN,MAAM,CAACG,EAAR,CAApB,EAAiC;AAC/BG,QAAAA,eAAe,CAACN,MAAM,CAACG,EAAR,CAAf,GAA6B,EAA7B;AACD;;AACD,UAAI,CAACI,iBAAiB,CAACP,MAAM,CAACG,EAAR,CAAtB,EAAmC;AACjCI,QAAAA,iBAAiB,CAACP,MAAM,CAACG,EAAR,CAAjB,GAA+B,EAA/B;AACD;;AAED,UAAIH,MAAM,CAACS,aAAP,IAAwBL,mBAAmB,CAACJ,MAAM,CAACG,EAAR,CAAnB,CAA+BO,OAA/B,CAAuCV,MAAM,CAACS,aAA9C,MAAiE,CAA7F,EAAgG;AAC9FL,QAAAA,mBAAmB,CAACJ,MAAM,CAACG,EAAR,CAAnB,CAA+BQ,IAA/B,CAAoCX,MAAM,CAACS,aAA3C;AACD;;AAED,UAAIT,MAAM,CAACY,SAAP,IAAoBP,eAAe,CAACL,MAAM,CAACG,EAAR,CAAf,CAA2BO,OAA3B,CAAmCV,MAAM,CAACY,SAA1C,MAAyD,CAAjF,EAAoF;AAClFP,QAAAA,eAAe,CAACL,MAAM,CAACG,EAAR,CAAf,CAA2BQ,IAA3B,CAAgCX,MAAM,CAACY,SAAvC;AACD;;AAED,UAAIZ,MAAM,CAACa,SAAP,IAAoBP,eAAe,CAACN,MAAM,CAACG,EAAR,CAAf,CAA2BO,OAA3B,WAAsCV,MAAM,CAACa,SAA7C,cAA0Db,MAAM,CAACc,UAAjE,OAAmF,CAA3G,EAA8G;AAC5GR,QAAAA,eAAe,CAACN,MAAM,CAACG,EAAR,CAAf,CAA2BQ,IAA3B,WAAmCX,MAAM,CAACa,SAA1C,cAAuDb,MAAM,CAACc,UAA9D;AACD;;AAED,UAAId,MAAM,CAACe,WAAP,IAAsBR,iBAAiB,CAACP,MAAM,CAACG,EAAR,CAAjB,CAA6BO,OAA7B,CAAqCV,MAAM,CAACe,WAA5C,MAA6D,CAAvF,EAA0F;AACxFR,QAAAA,iBAAiB,CAACP,MAAM,CAACG,EAAR,CAAjB,CAA6BQ,IAA7B,CAAkCX,MAAM,CAACe,WAAzC;AACD;;AAED,YAAKjB,YAAL,CAAkBkB,QAAlB,CAA2BC,UAA3B,CAAsCjB,MAAM,CAACG,EAA7C,IAAmD;AACjDM,QAAAA,aAAa,EAAEL,mBAAmB,CAACJ,MAAM,CAACG,EAAR,CADe;AAEjDU,QAAAA,SAAS,EAAEP,eAAe,CAACN,MAAM,CAACG,EAAR,CAFuB;AAGjDW,QAAAA,UAAU,EAAEd,MAAM,CAACc,UAH8B;AAIjDC,QAAAA,WAAW,EAAER,iBAAiB,CAACP,MAAM,CAACG,EAAR,CAJmB;AAKjDe,QAAAA,QAAQ,EAAElB,MAAM,CAACkB,QALgC;AAMjDN,QAAAA,SAAS,EAAEP,eAAe,CAACL,MAAM,CAACG,EAAR,CANuB;AAOjDgB,QAAAA,SAAS,EAAEnB,MAAM,CAACmB,SAP+B;AAQjDhB,QAAAA,EAAE,EAAEH,MAAM,CAACG,EARsC;AASjDF,QAAAA,IAAI,EAAED,MAAM,CAACC;AAToC,OAAnD;AAYA,YAAKH,YAAL,CAAkBsB,cAAlB,CAAiCC,MAAjC,CAAwCZ,aAAxC,GAAwDL,mBAAmB,CAACJ,MAAM,CAACG,EAAR,CAA3E;AACA,YAAKL,YAAL,CAAkBsB,cAAlB,CAAiCC,MAAjC,CAAwCR,SAAxC,GAAoDP,eAAe,CAACN,MAAM,CAACG,EAAR,CAAnE;AACA,YAAKL,YAAL,CAAkBsB,cAAlB,CAAiCC,MAAjC,CAAwCN,WAAxC,GAAsDR,iBAAiB,CAACP,MAAM,CAACG,EAAR,CAAvE;AACA,YAAKL,YAAL,CAAkBsB,cAAlB,CAAiCC,MAAjC,CAAwCT,SAAxC,GAAoDP,eAAe,CAACL,MAAM,CAACG,EAAR,CAAnE;AAEA,YAAKL,YAAL,CAAkBG,IAAlB,EAAwBO,YAAxB,EAAsCc,kBAAtC,GAA2DtB,MAAM,CAACsB,kBAAlE;AACA,YAAKxB,YAAL,CAAkBG,IAAlB,EAAwBO,YAAxB,EAAsCe,aAAtC,GAAsDvB,MAAM,CAACuB,aAA7D;AACA,YAAKzB,YAAL,CAAkBG,IAAlB,EAAwBO,YAAxB,EAAsCgB,SAAtC,GAAkDxB,MAAM,CAACwB,SAAzD;AACA,YAAK1B,YAAL,CAAkBG,IAAlB,EAAwBO,YAAxB,EAAsCiB,eAAtC,GAAwDzB,MAAM,CAACyB,eAAP,IAA0B,CAAlF;AACA,YAAK3B,YAAL,CAAkBG,IAAlB,EAAwBO,YAAxB,EAAsCkB,WAAtC,GAAoD1B,MAAM,CAAC0B,WAAP,IAAsB,CAA1E;AACA,YAAK5B,YAAL,CAAkBG,IAAlB,EAAwBO,YAAxB,EAAsCmB,oBAAtC,GAA6D3B,MAAM,CAAC2B,oBAApE;AACA,YAAK7B,YAAL,CAAkBG,IAAlB,EAAwBO,YAAxB,EAAsCoB,wBAAtC,GAAiE5B,MAAM,CAAC4B,wBAAxE;AACA,YAAK9B,YAAL,CAAkBG,IAAlB,EAAwBO,YAAxB,EAAsCqB,wBAAtC,GAAiE7B,MAAM,CAAC6B,wBAAxE;AACD,KA3dgD;AAE/C,UAAKC,YAAL,GAAoB,KAApB;AACA,UAAKhC,YAAL,GAAoBA,YAApB;AACA,UAAKD,MAAL,GAAcA,MAAd;AACA,UAAKkC,aAAL,GAAqBlC,MAAM,CAACkC,aAA5B;AACA,UAAKC,YAAL,GAAoB,CAApB;AACA,UAAKC,eAAL,GAAuB;AACrBC,MAAAA,WAAW,EAAE;AAACC,QAAAA,KAAK,EAAE;AAACC,UAAAA,IAAI,EAAE,EAAP;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAAR;AAA8BC,QAAAA,KAAK,EAAE;AAACF,UAAAA,IAAI,EAAE,EAAP;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAArC;AAA2DE,QAAAA,KAAK,EAAE;AAACH,UAAAA,IAAI,EAAE,EAAP;AAAWC,UAAAA,IAAI,EAAE;AAAjB;AAAlE,OADQ;AAErBF,MAAAA,KAAK,EAAE;AAACC,QAAAA,IAAI,EAAE,EAAP;AAAWC,QAAAA,IAAI,EAAE;AAAjB,OAFc;AAGrBC,MAAAA,KAAK,EAAE;AAACF,QAAAA,IAAI,EAAE,EAAP;AAAWC,QAAAA,IAAI,EAAE;AAAjB,OAHc;AAIrBE,MAAAA,KAAK,EAAE;AAACH,QAAAA,IAAI,EAAE,EAAP;AAAWC,QAAAA,IAAI,EAAE;AAAjB;AAJc,KAAvB;AAP+C;AAahD;AAED;;;;;;;;;;;kCAOc;AACZ,UAAMG,aAAa,GAAGC,gBAAQC,SAAR,CAAkB,CAAlB,EAAqBC,YAArB,CAAkC,CAAlC,CAAtB;AACA,UAAMC,WAAW,GAAGH,gBAAQC,SAAR,CAAkB,CAAlB,EAAqBG,aAArB,CAAmC,CAAnC,CAApB;AACA,UAAMC,aAAa,GAAGL,gBAAQC,SAAR,CAAkB,CAAlB,EAAqBK,YAArB,CAAkC,CAAlC,CAAtB;AACA,UAAMC,WAAW,GAAGP,gBAAQC,SAAR,CAAkB,CAAlB,EAAqBO,aAArB,CAAmC,CAAnC,CAApB;AACA,UAAMC,WAAW,GAAGT,gBAAQC,SAAR,CAAkB,CAAlB,EAAqBO,aAArB,CAAmC,CAAnC,CAApB;AACA,UAAME,aAAa,GAAGV,gBAAQC,SAAR,CAAkB,CAAlB,EAAqBK,YAArB,CAAkC,CAAlC,CAAtB;AAEA,sCAAkB;AAChBH,QAAAA,WAAW,EAAXA,WADgB;AAEhB9C,QAAAA,YAAY,EAAE,KAAKA,YAFH;AAGhBmC,QAAAA,eAAe,EAAE,KAAKA;AAHN,OAAlB;AAKA,wCAAoB;AAClBO,QAAAA,aAAa,EAAbA,aADkB;AAElB1C,QAAAA,YAAY,EAAE,KAAKA,YAFD;AAGlBmC,QAAAA,eAAe,EAAE,KAAKA;AAHJ,OAApB;AAMA,wCAAoB;AAClBa,QAAAA,aAAa,EAAbA,aADkB;AAElBhD,QAAAA,YAAY,EAAE,KAAKA,YAFD;AAGlBmC,QAAAA,eAAe,EAAE,KAAKA;AAHJ,OAApB;AAKA,sCAAkB;AAChBe,QAAAA,WAAW,EAAXA,WADgB;AAEhBlD,QAAAA,YAAY,EAAE,KAAKA,YAFH;AAGhBmC,QAAAA,eAAe,EAAE,KAAKA;AAHN,OAAlB,EAxBY,CA8BZ;;AAEA,sCAAkB;AAChBe,QAAAA,WAAW,EAAEE,WADG;AAEhBpD,QAAAA,YAAY,EAAE,KAAKA,YAFH;AAGhBmC,QAAAA,eAAe,EAAE,KAAKA,eAHN;AAIhBmB,QAAAA,aAAa,EAAE;AAJC,OAAlB;AAOA,wCAAoB;AAClBN,QAAAA,aAAa,EAAEK,aADG;AAElBrD,QAAAA,YAAY,EAAE,KAAKA,YAFD;AAGlBmC,QAAAA,eAAe,EAAE,KAAKA,eAHJ;AAIlBmB,QAAAA,aAAa,EAAE;AAJG,OAApB;AAQA,WAAKpB,YAAL,GAAoB,KAAKA,YAAL,GAAoB,CAAxC;AAEAS,sBAAQC,SAAR,CAAkB,CAAlB,EAAqBW,cAArB,GAAsC,KAAKrB,YAA3C,CAjDY,CAmDZ;;AACA,WAAKC,eAAL,GAAuBqB,IAAI,CAACC,KAAL,CAAW,wBAAe,KAAKzD,YAApB,CAAX,CAAvB;AAEA,WAAK0D,IAAL,CACE;AACEC,QAAAA,IAAI,EAAE,eADR;AAEEC,QAAAA,QAAQ,EAAE;AAFZ,OADF,EAKEC,0BAAeC,aALjB,EAMEnB,gBAAQC,SAAR,CAAkB,CAAlB,CANF;AAQD;AAED;;;;;;;;;;;yCAQqBmB,c,EAAgB;AACnC,WAAKA,cAAL,GAAsBA,cAAtB;AACD;AAED;;;;;;;;;;;kCAQcA,c,EAAgB;AAAA;;AAC5B,UAAI,CAAC,KAAK/B,YAAV,EAAwB;AACtB,aAAKA,YAAL,GAAoB,IAApB;AACA,aAAK+B,cAAL,GAAsBA,cAAtB;AACA,aAAKC,gBAAL;AACA,aAAKC,aAAL,GAAqBC,WAAW,CAAC,YAAM;AACrC,UAAA,MAAI,CAACF,gBAAL;AACD,SAF+B,EAE7B,KAAKjE,MAAL,CAAYoE,gBAFiB,CAAhC,CAJsB,CAOtB;;AACA,aAAKC,WAAL;AACA,aAAKC,WAAL,GAAmBH,WAAW,CAAC,YAAM;AACnC,UAAA,MAAI,CAACE,WAAL;AACD,SAF6B,EAE3BE,sBAF2B,CAA9B;AAGD;AACF;AAED;;;;;;;;;;mCAOe;AACb,UAAI,KAAKL,aAAT,EAAwB;AACtB,aAAKD,gBAAL;AACAO,QAAAA,aAAa,CAAC,KAAKN,aAAN,CAAb;AACA,aAAKO,YAAL,GAAoBC,SAApB;AACD;;AAED,UAAI,KAAKJ,WAAT,EAAsB;AACpB,aAAKD,WAAL;AACAG,QAAAA,aAAa,CAAC,KAAKF,WAAN,CAAb;AACA,aAAKG,YAAL,GAAoBC,SAApB;AACD;;AACD,WAAKV,cAAL,GAAsB,IAAtB;AACD;AAED;;;;;;;;;;;;;wCAUoBW,c,EAAgBvE,I,EAAMC,Q,EAAU;AAClD,UAAI,CAACsE,cAAL,EAAqB;AACnB;AACD;;AAED,cAAQA,cAAc,CAACvE,IAAvB;AACE,aAAK,cAAL;AACE,eAAKwE,wBAAL,CAA8BD,cAA9B,EAA8CvE,IAA9C;AACA;;AACF,aAAK,aAAL;AACE,eAAKyE,uBAAL,CAA6BF,cAA7B,EAA6CvE,IAA7C;AACA;;AACF,aAAK,OAAL;AACE,eAAK0E,kBAAL,CAAwBH,cAAxB,EAAwCvE,IAAxC;AACA;;AACF,aAAK,oBAAL;AACA,aAAK,qBAAL;AACE,eAAK2E,sBAAL,CAA4BJ,cAA5B,EAA4CvE,IAA5C,EAAkDC,QAAlD;AACA;;AACF,aAAK,iBAAL;AACA,aAAK,kBAAL;AACE,eAAK2E,eAAL,CAAqBL,cAArB,EAAqCvE,IAArC,EAA2CC,QAA3C;AACA;;AACF;AACE;AAnBJ;AAqBD;AAED;;;;;;;;;;;kDAQ8B4E,e,EAAiB7E,I,EAAMC,Q,EAAU;AAAA;;AAAA,UACtD6E,KADsD,GAC7CC,mCAD6C,CACtDD,KADsD;AAG7DD,MAAAA,eAAe,CAACG,OAAhB,CAAwB,UAACjF,MAAD,EAAY;AAClC,YAAI+E,KAAK,CAACG,QAAN,CAAelF,MAAM,CAACC,IAAtB,CAAJ,EAAiC;AAC/B,UAAA,MAAI,CAACkF,mBAAL,CAAyBnF,MAAzB,EAAiCC,IAAjC,EAAuCC,QAAvC;AACD;AACF,OAJD;AAKD;AAED;;;;;;;;;;uCAOmB;AAAA;;AACjB,UAAI,CAAC,KAAK2D,cAAV,EAA0B;AACxB;AACD;;AAED,UAAI,KAAKA,cAAL,IAAuB,KAAKA,cAAL,CAAoBuB,eAApB,KAAwCC,4BAAiBC,MAApF,EAA4F;AAC1FC,6BAAYC,MAAZ,CAAmBC,KAAnB,CAAyB,4EAAzB;;AAEA;AACD;;AACDF,2BAAYC,MAAZ,CAAmBC,KAAnB,CAAyB,2DAAzB;;AACA,WAAK5B,cAAL,CAAoB6B,gBAApB,CAAqCC,MAArC,CAA4CC,QAA5C,GAAuDC,IAAvD,CAA4D,UAACC,GAAD,EAAS;AACnE,QAAA,MAAI,CAACC,6BAAL,CAAmCD,GAAnC,EAAwCE,iBAAMC,eAA9C,EAA+D,IAA/D;AACD,OAFD;AAIA,WAAKpC,cAAL,CAAoB6B,gBAApB,CAAqCQ,QAArC,CAA8CN,QAA9C,GAAyDC,IAAzD,CAA8D,UAACC,GAAD,EAAS;AACrE,QAAA,MAAI,CAACC,6BAAL,CAAmCD,GAAnC,EAAwCE,iBAAMC,eAA9C,EAA+D,KAA/D;AACD,OAFD;AAIA,WAAKpC,cAAL,CAAoBsC,gBAApB,CAAqCR,MAArC,CAA4CC,QAA5C,GAAuDC,IAAvD,CAA4D,UAACC,GAAD,EAAS;AACnE,QAAA,MAAI,CAACC,6BAAL,CAAmCD,GAAnC,EAAwCE,iBAAMI,eAA9C,EAA+D,IAA/D;AACD,OAFD;AAIA,WAAKvC,cAAL,CAAoBsC,gBAApB,CAAqCD,QAArC,CAA8CN,QAA9C,GAAyDC,IAAzD,CAA8D,UAACC,GAAD,EAAS;AACrE,QAAA,MAAI,CAACC,6BAAL,CAAmCD,GAAnC,EAAwCE,iBAAMI,eAA9C,EAA+D,KAA/D;AACD,OAFD,EAvBiB,CA2BjB;;AACA,WAAKvC,cAAL,CAAoBwC,gBAApB,CAAqCV,MAArC,CAA4CC,QAA5C,GAAuDC,IAAvD,CAA4D,UAACC,GAAD,EAAS;AACnE,QAAA,MAAI,CAACC,6BAAL,CAAmCD,GAAnC,EAAwCE,iBAAMM,eAA9C,EAA+D,IAA/D;AACD,OAFD;AAIA,WAAKzC,cAAL,CAAoBwC,gBAApB,CAAqCH,QAArC,CAA8CN,QAA9C,GAAyDC,IAAzD,CAA8D,UAACC,GAAD,EAAS;AACrE,QAAA,MAAI,CAACC,6BAAL,CAAmCD,GAAnC,EAAwCE,iBAAMM,eAA9C,EAA+D,KAA/D;AACD,OAFD;;AAGAf,2BAAYC,MAAZ,CAAmBC,KAAnB,CAAyB,oEAAzB;AACD;AAED;;;;;;;;;;6CAOyBzF,M,EAAQC,I,EAAM;AACrC,UAAMsG,SAAS,GAAGtG,IAAI,IAAI,OAA1B;AACA,UAAMuG,YAAY,GAAG,MAArB;;AAEA,UAAIxG,MAAM,CAACwB,SAAX,EAAsB;AACpB,YAAIiF,SAAS,GAAG,CAAhB;;AAEA,YAAI,CAAC,KAAK3G,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoDE,aAAzD,EAAwE;AACtE,eAAK5G,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoDE,aAApD,GAAoE1G,MAAM,CAACwB,SAA3E;AACD;;AACD,YAAI,CAAC,KAAK1B,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoDG,aAAzD,EAAwE;AACtE,eAAK7G,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoDG,aAApD,GAAoE3G,MAAM,CAAC2G,aAA3E;AACD;;AACD,YAAI,CAAC,KAAK7G,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoDI,gBAAzD,EAA2E;AACzE,eAAK9G,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoDI,gBAApD,GAAuE5G,MAAM,CAAC4G,gBAA9E;AACD;;AAED,YAAMC,KAAK,GAAG7G,MAAM,CAACwB,SAAP,GAAmB,KAAK1B,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoDE,aAArF;AAEA,aAAK5G,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoDE,aAApD,GAAoE1G,MAAM,CAACwB,SAA3E;AAEAiF,QAAAA,SAAS,GAAGI,KAAK,GAAG,IAApB;AAEA,aAAK/G,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CM,kBAA3C,GAAgEL,SAAS,CAACM,OAAV,CAAkB,CAAlB,CAAhE;AACA,aAAKjH,YAAL,CAAkByG,SAAlB,EAA6B/E,SAA7B,GAAyCiF,SAAzC;AAEA,aAAK3G,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CG,aAA3C,GAA2D3G,MAAM,CAAC2G,aAAP,GAAuB,KAAK7G,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoDG,aAAtI;AACA,aAAK7G,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CI,gBAA3C,GAA8D5G,MAAM,CAAC4G,gBAAP,GAA0B,KAAK9G,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoDI,gBAA5I;AACA,aAAK9G,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCS,aAAtC,GAAsDhH,MAAM,CAACG,EAA7D;;AAEA,YAAI,CAAC,KAAKL,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoD9E,WAAzD,EAAsE;AACpE,eAAK5B,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoD9E,WAApD,GAAkE1B,MAAM,CAAC0B,WAAzE;AACD;;AAED,aAAK5B,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C9E,WAA3C,GAAyD1B,MAAM,CAAC0B,WAAP,GAAqB,KAAK5B,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoD9E,WAAlI;AACA,aAAK5B,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoD9E,WAApD,GAAkE1B,MAAM,CAAC0B,WAAzE;AACA,aAAK5B,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CS,gBAA3C,GAA8DjH,MAAM,CAAC0B,WAArE;;AAEA,YAAI,KAAK5B,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C9E,WAA3C,KAA2D,CAA/D,EAAkE;AAChE6D,+BAAYC,MAAZ,CAAmB0B,GAAnB,+EAA8FX,SAA9F,QAA4G,KAAKzG,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C9E,WAAvJ;AACD,SApCmB,CAsCpB;;;AAEA,aAAK5B,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CW,qBAA3C,GAAmEnH,MAAM,CAAC4G,gBAA1E;AACA,aAAK9G,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CY,cAA3C,GAA4DpH,MAAM,CAACqH,SAAnE;AACA,aAAKvH,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2Cc,aAA3C,GAA2DtH,MAAM,CAACuH,QAAlE;AACA,aAAKzH,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CS,gBAA3C,GAA8DjH,MAAM,CAAC0B,WAArE;AACA,aAAK5B,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CgB,aAA3C,GAA2DxH,MAAM,CAACyH,QAAlE;AACA,aAAK3H,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CG,aAA3C,GAA2D3G,MAAM,CAAC2G,aAAlE;AACA,aAAK7G,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CkB,qBAA3C,GAAmE1H,MAAM,CAAC0H,qBAA1E;AACA,aAAK5H,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CmB,uBAA3C,GAAqE3H,MAAM,CAAC2H,uBAA5E;AACA,aAAK7H,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CoB,kCAA3C,GAAgF5H,MAAM,CAAC4H,kCAAvF;AACA,aAAK9H,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CqB,wBAA3C,GAAsE7H,MAAM,CAAC6H,wBAA7E;AACA,aAAK/H,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CsB,cAA3C,GAA4D9H,MAAM,CAACwB,SAAnE;AACA,aAAK1B,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CuB,eAA3C,GAA6D/H,MAAM,CAAC+H,eAApE;AACA,aAAKjI,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CwB,sBAA3C,GAAoEhI,MAAM,CAACgI,sBAA3E;AACD;AACF;AAGD;;;;;;;;;;4CAOwBhI,M,EAAQC,I,EAAM;AACpC,UAAMsG,SAAS,GAAGtG,IAAI,IAAI,OAA1B;AACA,UAAMuG,YAAY,GAAG,MAArB;;AAEA,UAAIxG,MAAM,CAACuB,aAAX,EAA0B;AACxB,YAAIkF,SAAS,GAAG,CAAhB;;AAEA,YAAI,CAAC,KAAK3G,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoDyB,iBAAzD,EAA4E;AAC1E,eAAKnI,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoDyB,iBAApD,GAAwEjI,MAAM,CAACuB,aAA/E;AACD;;AAED,YAAI,CAAC,KAAKzB,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoDe,QAAzD,EAAmE;AACjE,eAAKzH,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoDe,QAApD,GAA+DvH,MAAM,CAACuH,QAAtE;AACD;;AAED,YAAI,CAAC,KAAKzH,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoD0B,WAAzD,EAAsE;AACpE,eAAKpI,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoD0B,WAApD,GAAkElI,MAAM,CAACkI,WAAzE;AACD;;AAED,YAAI,CAAC,KAAKpI,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoD2B,oBAAzD,EAA+E;AAC7E,eAAKrI,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoD2B,oBAApD,GAA2EnI,MAAM,CAACyB,eAAlF;AACD;;AAED,YAAI,CAAC,KAAK3B,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoD4B,2BAAzD,EAAsF;AACpF,eAAKtI,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoD4B,2BAApD,GAAkFpI,MAAM,CAACoI,2BAAzF;AACD;;AAED,YAAMvB,KAAK,GAAG7G,MAAM,CAACuB,aAAP,GAAwB,KAAKzB,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoDyB,iBAA1F;AAEA,aAAKnI,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoDyB,iBAApD,GAAwEjI,MAAM,CAACuB,aAA/E;AAEAkF,QAAAA,SAAS,GAAGI,KAAK,GAAG,IAApB;AACA,aAAK/G,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CM,kBAA3C,GAAgEL,SAAS,CAACM,OAAV,CAAkB,CAAlB,CAAhE;AACA,aAAKjH,YAAL,CAAkByG,SAAlB,EAA6BhF,aAA7B,GAA6CkF,SAAS,CAACM,OAAV,CAAkB,CAAlB,CAA7C;AAEA,aAAKjH,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2Ce,QAA3C,GAAsDvH,MAAM,CAACuH,QAAP,GAAkB,KAAKzH,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoDe,QAA5H;AACA,aAAKzH,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C6B,kBAA3C,GAAgErI,MAAM,CAACkI,WAAP,GAAqB,KAAKpI,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoD0B,WAAzI;;AACA,YAAI,KAAKpI,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C6B,kBAA3C,GAAgE,CAApE,EAAuE;AACrE,eAAKvI,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C6B,kBAA3C,GAAgE,CAAhE;AACD;;AAED,aAAKvI,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C/E,eAA3C,GAA6DzB,MAAM,CAACyB,eAAP,GAAyB,KAAK3B,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoD2B,oBAA1I;AACA,aAAKrI,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCC,YAAtC,EAAoD2B,oBAApD,GAA2EnI,MAAM,CAACyB,eAAlF;;AAEA,YAAI,KAAK3B,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C/E,eAA3C,KAA+D,CAAnE,EAAsE;AACpE8D,+BAAYC,MAAZ,CAAmB8C,IAAnB,mFAAmG/B,SAAnG,QAAiH,KAAKzG,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C/E,eAA5J;AACD,SA1CuB,CA4CxB;;;AACA,aAAK3B,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C+B,sBAA3C,GAAoE,KAAKzI,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C6B,kBAA3C,GAAgE,CAAhE,GAAoE,KAAKvI,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C6B,kBAA3C,IAAiE,KAAKvI,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C/E,eAA3C,GAA6D,KAAK3B,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C6B,kBAAzK,CAApE,GAAmQ,CAAvU;;AACA,YAAI,KAAKvI,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C+B,sBAA3C,GAAoE,CAAxE,EAA2E;AACzEhD,+BAAYC,MAAZ,CAAmB8C,IAAnB,CAAwB,yFAAxB,EAAmH,KAAKxI,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C+B,sBAA9J;AACD;;AAED,aAAKzI,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CgC,gBAA3C,GAA8DxI,MAAM,CAACkI,WAArE;AACA,aAAKpI,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C4B,2BAA3C,GAAyEpI,MAAM,CAACoI,2BAAhF,CAnDwB,CAqDxB;;AACA,aAAKtI,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CY,cAA3C,GAA4DpH,MAAM,CAACqH,SAAnE;AACA,aAAKvH,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2Cc,aAA3C,GAA2DtH,MAAM,CAACuH,QAAlE;AACA,aAAKzH,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CiC,aAA3C,GAA2DzI,MAAM,CAACyI,aAAlE;AACA,aAAK3I,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CkC,gBAA3C,GAA8D1I,MAAM,CAAC0I,gBAArE;AACA,aAAK5I,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CmC,oBAA3C,GAAkE3I,MAAM,CAAC2I,oBAAP,IAA+B,CAAjG;AACA,aAAK7I,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CoC,mBAA3C,GAAiE5I,MAAM,CAAC4I,mBAAP,IAA8B,CAA/F;AAEA,aAAK9I,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CqC,qBAA3C,GAAmE7I,MAAM,CAAC6I,qBAA1E;AACA,aAAK/I,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C2B,oBAA3C,GAAkEnI,MAAM,CAACyB,eAAzE;AAGA,aAAK3B,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CsC,mBAA3C,GAAiE9I,MAAM,CAAC8I,mBAAxE;AACA,aAAKhJ,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CuC,UAA3C,GAAwD/I,MAAM,CAACgJ,kBAA/D;AACA,aAAKlJ,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2CyC,kBAA3C,GAAgEjJ,MAAM,CAACuB,aAAvE;AACA,aAAKzB,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C0C,mBAA3C,GAAiElJ,MAAM,CAACkJ,mBAAxE;AACA,aAAKpJ,YAAL,CAAkByG,SAAlB,EAA6BC,YAA7B,EAA2C2C,MAA3C,GAAoDnJ,MAAM,CAACmJ,MAA3D;AACD;AACF;AAED;;;;;;;;;;;;;AAiFA;;;;;;;;;uCASmBnJ,M,EAAQuG,S,EAAW;AACpC,UAAI,CAACvG,MAAD,IAAWA,MAAM,CAACC,IAAP,KAAgB,OAA/B,EAAwC;AACtC;AACD;;AACD,UAAID,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAE7B,UAAMuG,YAAY,GAAGxG,MAAM,CAACoJ,YAAP,KAAwB,IAAxB,GAA+B,MAA/B,GAAwC,MAA7D;;AAEA,UAAIpJ,MAAM,CAACqJ,UAAP,IAAqBrJ,MAAM,CAACsJ,WAAhC,EAA6C;AAC3C,aAAKxJ,YAAL,CAAkBoC,WAAlB,CAA8BqE,SAA9B,EAAyCC,YAAzC,EAAuD+C,KAAvD,GAA+DvJ,MAAM,CAACqJ,UAAtE;AACA,aAAKvJ,YAAL,CAAkBoC,WAAlB,CAA8BqE,SAA9B,EAAyCC,YAAzC,EAAuDgD,MAAvD,GAAgExJ,MAAM,CAACsJ,WAAvE;AACA,aAAKxJ,YAAL,CAAkBoC,WAAlB,CAA8BqE,SAA9B,EAAyCC,YAAzC,EAAuDiD,UAAvD,GAAoEzJ,MAAM,CAACyJ,UAA3E;AACA,aAAK3J,YAAL,CAAkBoC,WAAlB,CAA8BqE,SAA9B,EAAyCC,YAAzC,EAAuDkD,cAAvD,GAAwE1J,MAAM,CAAC0J,cAA/E;AACD;;AAED,UAAIlD,YAAY,KAAK,MAArB,EAA6B;AAC3B,aAAK1G,YAAL,CAAkBoC,WAAlB,CAA8BqE,SAA9B,EAAyCC,YAAzC,EAAuDmD,cAAvD,GAAwE3J,MAAM,CAAC2J,cAA/E;AACA,aAAK7J,YAAL,CAAkBoC,WAAlB,CAA8BqE,SAA9B,EAAyCC,YAAzC,EAAuDiC,aAAvD,GAAuEzI,MAAM,CAACyI,aAA9E;AACA,aAAK3I,YAAL,CAAkBoC,WAAlB,CAA8BqE,SAA9B,EAAyCC,YAAzC,EAAuDoD,aAAvD,GAAuE5J,MAAM,CAAC4J,aAA9E;AACD;;AAGD,UAAI5J,MAAM,CAAC6J,eAAP,IAA0BtD,SAAS,KAAK,OAA5C,EAAqD;AACnD,aAAKzG,YAAL,CAAkBoC,WAAlB,CAA8BqE,SAA9B,EAAyCC,YAAzC,EAAuDqD,eAAvD,GAAyE7J,MAAM,CAAC6J,eAAhF;AAEA,YAAMC,iBAAiB,GAAG9J,MAAM,IAAIA,MAAM,CAAC8J,iBAA3C;AACA,YAAMC,wBAAwB,GAAG/J,MAAM,IAAIA,MAAM,CAAC+J,wBAAlD;AAEA,aAAKjK,YAAL,CAAkBoC,WAAlB,CAA8BqE,SAA9B,EAAyCC,YAAzC,EAAuDwD,cAAvD,GAAwED,wBAAwB,IAAK,CAACD,iBAAD,GAAqB,CAACC,wBAA3H;AACD;AACF;AAED;;;;;;;;;;;2CAQuB/J,M,EAAQC,I,EAAM;AACnC,UAAI,CAACA,IAAL,EAAW;AACT;AACD;;AAED,UAAMsG,SAAS,GAAGtG,IAAlB;;AAEA,UAAI,CAAC,KAAKH,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCnE,IAAtC,CAA2C6H,0BAAhD,EAA4E;AAAE,aAAKnK,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCnE,IAAtC,CAA2C6H,0BAA3C,GAAwEjK,MAAM,CAACkI,WAA/E;AAA6F;;AAE3K,UAAMgC,iBAAiB,GAAGlK,MAAM,CAACkI,WAAP,GAAqB,KAAKpI,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCnE,IAAtC,CAA2C6H,0BAA1F;AAEA,WAAKnK,YAAL,CAAkBkB,QAAlB,CAA2BuF,SAA3B,EAAsCnE,IAAtC,CAA2C6H,0BAA3C,GAAwEjK,MAAM,CAACkI,WAA/E;AACA,WAAKpI,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkC+H,qBAAlC,GAA0DD,iBAA1D;AACA,WAAKpK,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkC6H,0BAAlC,GAA+DjK,MAAM,CAACkI,WAAtE;AACA,WAAKpI,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkC+G,MAAlC,GAA2CnJ,MAAM,CAACmJ,MAAlD;AACA,WAAKrJ,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkCgI,aAAlC,GAAkDpK,MAAM,CAACoK,aAAzD;AACA,WAAKtK,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkCjB,SAAlC,GAA8CnB,MAAM,CAACmB,SAArD;AACA,WAAKrB,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkCiI,IAAlC,GAAyCrK,MAAM,CAACqK,IAAhD;AACA,WAAKvK,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkCkI,eAAlC,GAAoDtK,MAAM,CAACsK,eAA3D,CAlBmC,CAoBnC;;AACA,WAAKxK,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkCmI,sBAAlC,GAA2D,KAAKzK,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkC6H,0BAAlC,GAA+D,CAA/D,GAAmE,KAAKnK,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkC6H,0BAAlC,GAA+D,KAAKnK,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkC6E,gBAApK,GAAuL,CAAlP;AAEA,WAAKnH,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkCmG,sBAAlC,GAA2D,KAAKzI,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkC+H,qBAAlC,GAA0D,CAA1D,GAA8D,KAAKrK,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkC+H,qBAAlC,GAA0D,GAA1D,IAAiE,KAAKrK,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkCV,WAAlC,GAAgD,KAAK5B,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkC+H,qBAAnJ,CAA9D,GAA0O,CAArS;;AAEA,UAAI,KAAKrK,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkCoI,kBAAlC,GAAuD,KAAK1K,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkCmG,sBAA7F,EAAqH;AACnH,aAAKzI,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkCoI,kBAAlC,GAAuD,KAAK1K,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkCmG,sBAAzF;AACD;;AAGD,UAAI,KAAKzI,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkCmG,sBAAlC,GAA2D,KAAK1I,MAAL,CAAY4K,6BAAvE,IAAwGlE,SAAS,KAAKP,iBAAMC,eAAhI,EAAiJ;AAC/I;AACAV,6BAAYC,MAAZ,CAAmB0B,GAAnB,CAAuB,sEAAvB,EAA+F,KAAKpH,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkCmG,sBAAjI;;AACA,aAAK/E,IAAL,CACE;AACEC,UAAAA,IAAI,EAAE,eADR;AAEEC,UAAAA,QAAQ,EAAE;AAFZ,SADF,EAKEC,0BAAe+G,uBALjB,EAME;AACEnE,UAAAA,SAAS,EAATA,SADF;AAEEoE,UAAAA,eAAe,EAAE,KAAK7K,YAAL,CAAkByG,SAAlB,EAA6BnE,IAA7B,CAAkCmG;AAFrD,SANF;AAWD;AACF;;;EApkBwCqC,oB","sourcesContent":["\nimport EventsScope from '../common/events/events-scope';\nimport {EVENT_TRIGGERS,\n  DEFAULT_GET_STATS_FILTER, CONNECTION_STATE, STATS, MQA_INTEVAL} from '../constants';\nimport mqaData from '../mediaQualityMetrics/config';\nimport LoggerProxy from '../common/logs/logger-proxy';\n\nimport defaultStats from './global';\nimport {\n  getAudioSenderMqa,\n  getAudioReceiverMqa,\n  getVideoSenderMqa,\n  getVideoReceiverMqa\n} from './mqaUtil';\n\n\n/**\n  * Meeting High Packet Loss Event\n  * Emitted when ever there is high packet loss detected\n  * @event meeting:highPacketLoss\n  * @type {Object}\n  * @property {String} mediaType Type of media experiencing packet loss\n  * @property {Number} packetLossRatio current packet loss ratio\n  * @memberof StatsAnalyzer\n  */\n\n/**\n * Stats Analyzer class that will emit events based on detected quality\n *\n * @export\n * @class StatsAnalyzer\n * @extends {EventsScope}\n */\nexport default class StatsAnalyzer extends EventsScope {\n  /**\n   * Creates a new instance of StatsAnalyzer\n   * @constructor\n   * @public\n   * @param {Object} config SDK Configuration Object\n   * @param {Object} statsResults Default properties for stats\n   */\n  constructor(config, statsResults = defaultStats) {\n    super();\n    this.statsStarted = false;\n    this.statsResults = statsResults;\n    this.config = config;\n    this.correlationId = config.correlationId;\n    this.mqaSentCount = 0;\n    this.lastMqaDataSent = {\n      resolutions: {video: {send: {}, recv: {}}, audio: {send: {}, recv: {}}, share: {send: {}, recv: {}}},\n      video: {send: {}, recv: {}},\n      audio: {send: {}, recv: {}},\n      share: {send: {}, recv: {}}\n    };\n  }\n\n  /**\n   * captures MQA data from peerconnection\n   *\n   * @public\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  sendMqaData() {\n    const audioReceiver = mqaData.intervals[0].audioReceive[0];\n    const audioSender = mqaData.intervals[0].audioTransmit[0];\n    const videoReceiver = mqaData.intervals[0].videoReceive[0];\n    const videoSender = mqaData.intervals[0].videoTransmit[0];\n    const shareSender = mqaData.intervals[0].videoTransmit[1];\n    const shareReceiver = mqaData.intervals[0].videoReceive[1];\n\n    getAudioSenderMqa({\n      audioSender,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent\n    });\n    getAudioReceiverMqa({\n      audioReceiver,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent\n    });\n\n    getVideoReceiverMqa({\n      videoReceiver,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent\n    });\n    getVideoSenderMqa({\n      videoSender,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent\n    });\n\n    // Capture mqa for share scenario\n\n    getVideoSenderMqa({\n      videoSender: shareSender,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent,\n      isShareStream: true\n    });\n\n    getVideoReceiverMqa({\n      videoReceiver: shareReceiver,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent,\n      isShareStream: true\n    });\n\n\n    this.mqaSentCount = this.mqaSentCount + 1;\n\n    mqaData.intervals[0].intervalNumber = this.mqaSentCount;\n\n    // DO Deep copy, for some reason it takes the reference all the time rather then old value set\n    this.lastMqaDataSent = JSON.parse(JSON.stringify(this.statsResults));\n\n    this.emit(\n      {\n        file: 'statsAnalyzer',\n        function: 'sendMqaData'\n      },\n      EVENT_TRIGGERS.MEDIA_QUALITY,\n      mqaData.intervals[0]\n    );\n  }\n\n  /**\n   * updated the peerconnection when changed\n   *\n   * @private\n   * @memberof updatePeerconnection\n   * @param {PeerConnection} peerConnection\n   * @returns {void}\n   */\n  updatePeerconnection(peerConnection) {\n    this.peerConnection = peerConnection;\n  }\n\n  /**\n   * Starts the stats analyzer on interval\n   *\n   * @public\n   * @memberof StatsAnalyzer\n   * @param {PeerConnection} peerConnection\n   * @returns {void}\n   */\n  startAnalyzer(peerConnection) {\n    if (!this.statsStarted) {\n      this.statsStarted = true;\n      this.peerConnection = peerConnection;\n      this.getStatsAndParse();\n      this.statsInterval = setInterval(() => {\n        this.getStatsAndParse();\n      }, this.config.analyzerInterval);\n      // Trigger initial fetch\n      this.sendMqaData();\n      this.mqaInterval = setInterval(() => {\n        this.sendMqaData();\n      }, MQA_INTEVAL);\n    }\n  }\n\n  /**\n   * Cleans up the analyzer when done\n   *\n   * @public\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  stopAnalyzer() {\n    if (this.statsInterval) {\n      this.getStatsAndParse();\n      clearInterval(this.statsInterval);\n      this.statsInterva = undefined;\n    }\n\n    if (this.mqaInterval) {\n      this.sendMqaData();\n      clearInterval(this.mqaInterval);\n      this.statsInterva = undefined;\n    }\n    this.peerConnection = null;\n  }\n\n  /**\n   * Parse a single result of get stats\n   *\n   * @private\n   * @param {*} getStatsResult\n   * @param {String} type\n   * @param {boolean} isSender\n   * @returns {void}\n   * @memberof StatsAnalyzer\n   */\n  parseGetStatsResult(getStatsResult, type, isSender) {\n    if (!getStatsResult) {\n      return;\n    }\n\n    switch (getStatsResult.type) {\n      case 'outbound-rtp':\n        this.processOutboundRTPResult(getStatsResult, type);\n        break;\n      case 'inbound-rtp':\n        this.processInboundRTPResult(getStatsResult, type);\n        break;\n      case 'track':\n        this.processTrackResult(getStatsResult, type);\n        break;\n      case 'remote-inbound-rtp':\n      case 'remote-outbound-rtp':\n        this.compareSentAndReceived(getStatsResult, type, isSender);\n        break;\n      case 'remotecandidate':\n      case 'remote-candidate':\n        this.remotecandidate(getStatsResult, type, isSender);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Filters the get stats results for types\n   * @private\n   * @param {Array} getStatsResults\n   * @param {String} type\n   * @param {boolean} isSender\n   * @returns {void}\n   */\n  filterAndParseGetStatsResults(getStatsResults, type, isSender) {\n    const {types} = DEFAULT_GET_STATS_FILTER;\n\n    getStatsResults.forEach((result) => {\n      if (types.includes(result.type)) {\n        this.parseGetStatsResult(result, type, isSender);\n      }\n    });\n  }\n\n  /**\n   * Does a `getStats` on all the transceivers and parses the results\n   *\n   * @private\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  getStatsAndParse() {\n    if (!this.peerConnection) {\n      return;\n    }\n\n    if (this.peerConnection && this.peerConnection.connectionState === CONNECTION_STATE.FAILED) {\n      LoggerProxy.logger.trace('StatsAnalyzer:index#getStatsAndParse --> PeerConnection is in failed state');\n\n      return;\n    }\n    LoggerProxy.logger.trace('StatsAnalyzer:index#getStatsAndParse --> Collecting Stats');\n    this.peerConnection.videoTransceiver.sender.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.VIDEO_CORRELATE, true);\n    });\n\n    this.peerConnection.videoTransceiver.receiver.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.VIDEO_CORRELATE, false);\n    });\n\n    this.peerConnection.audioTransceiver.sender.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.AUDIO_CORRELATE, true);\n    });\n\n    this.peerConnection.audioTransceiver.receiver.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.AUDIO_CORRELATE, false);\n    });\n\n    // TODO: add checks for screen share\n    this.peerConnection.shareTransceiver.sender.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.SHARE_CORRELATE, true);\n    });\n\n    this.peerConnection.shareTransceiver.receiver.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.SHARE_CORRELATE, false);\n    });\n    LoggerProxy.logger.trace('StatsAnalyzer:index#getStatsAndParse --> Finished Collecting Stats');\n  }\n\n  /**\n   * Processes OutboundRTP stats result and stores\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @returns {void}\n   */\n  processOutboundRTPResult(result, type) {\n    const mediaType = type || 'audio';\n    const sendrecvType = 'send';\n\n    if (result.bytesSent) {\n      let kilobytes = 0;\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].prevBytesSent) {\n        this.statsResults.internal[mediaType][sendrecvType].prevBytesSent = result.bytesSent;\n      }\n      if (!this.statsResults.internal[mediaType][sendrecvType].framesEncoded) {\n        this.statsResults.internal[mediaType][sendrecvType].framesEncoded = result.framesEncoded;\n      }\n      if (!this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded) {\n        this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded = result.keyFramesEncoded;\n      }\n\n      const bytes = result.bytesSent - this.statsResults.internal[mediaType][sendrecvType].prevBytesSent;\n\n      this.statsResults.internal[mediaType][sendrecvType].prevBytesSent = result.bytesSent;\n\n      kilobytes = bytes / 1024;\n\n      this.statsResults[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);\n      this.statsResults[mediaType].bytesSent = kilobytes;\n\n      this.statsResults[mediaType][sendrecvType].framesEncoded = result.framesEncoded - this.statsResults.internal[mediaType][sendrecvType].framesEncoded;\n      this.statsResults[mediaType][sendrecvType].keyFramesEncoded = result.keyFramesEncoded - this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded;\n      this.statsResults.internal[mediaType].outboundRtpId = result.id;\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].packetsSent) {\n        this.statsResults.internal[mediaType][sendrecvType].packetsSent = result.packetsSent;\n      }\n\n      this.statsResults[mediaType][sendrecvType].packetsSent = result.packetsSent - this.statsResults.internal[mediaType][sendrecvType].packetsSent;\n      this.statsResults.internal[mediaType][sendrecvType].packetsSent = result.packetsSent;\n      this.statsResults[mediaType][sendrecvType].totalPacketsSent = result.packetsSent;\n\n      if (this.statsResults[mediaType][sendrecvType].packetsSent === 0) {\n        LoggerProxy.logger.log(`StatsAnalyzer:index#processInboundRTPResult --> No packets sent for ${mediaType} `, this.statsResults[mediaType][sendrecvType].packetsSent);\n      }\n\n      // Data saved to send MQA metrics\n\n      this.statsResults[mediaType][sendrecvType].totalKeyFramesEncoded = result.keyFramesEncoded;\n      this.statsResults[mediaType][sendrecvType].totalNackCount = result.nackCount;\n      this.statsResults[mediaType][sendrecvType].totalPliCount = result.pliCount;\n      this.statsResults[mediaType][sendrecvType].totalPacketsSent = result.packetsSent;\n      this.statsResults[mediaType][sendrecvType].totalFirCount = result.firCount;\n      this.statsResults[mediaType][sendrecvType].framesEncoded = result.framesEncoded;\n      this.statsResults[mediaType][sendrecvType].encoderImplementation = result.encoderImplementation;\n      this.statsResults[mediaType][sendrecvType].qualityLimitationReason = result.qualityLimitationReason;\n      this.statsResults[mediaType][sendrecvType].qualityLimitationResolutionChanges = result.qualityLimitationResolutionChanges;\n      this.statsResults[mediaType][sendrecvType].retransmittedPacketsSent = result.retransmittedPacketsSent;\n      this.statsResults[mediaType][sendrecvType].totalBytesSent = result.bytesSent;\n      this.statsResults[mediaType][sendrecvType].headerBytesSent = result.headerBytesSent;\n      this.statsResults[mediaType][sendrecvType].retransmittedBytesSent = result.retransmittedBytesSent;\n    }\n  }\n\n\n  /**\n   * Processes InboundRTP stats result and stores\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @returns {void}\n   */\n  processInboundRTPResult(result, type) {\n    const mediaType = type || 'audio';\n    const sendrecvType = 'recv';\n\n    if (result.bytesReceived) {\n      let kilobytes = 0;\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived) {\n        this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived = result.bytesReceived;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].pliCount) {\n        this.statsResults.internal[mediaType][sendrecvType].pliCount = result.pliCount;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].packetsLost) {\n        this.statsResults.internal[mediaType][sendrecvType].packetsLost = result.packetsLost;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived) {\n        this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived = result.packetsReceived;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].lastPacketReceivedTimestamp) {\n        this.statsResults.internal[mediaType][sendrecvType].lastPacketReceivedTimestamp = result.lastPacketReceivedTimestamp;\n      }\n\n      const bytes = result.bytesReceived - (this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived);\n\n      this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived = result.bytesReceived;\n\n      kilobytes = bytes / 1024;\n      this.statsResults[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);\n      this.statsResults[mediaType].bytesReceived = kilobytes.toFixed(1);\n\n      this.statsResults[mediaType][sendrecvType].pliCount = result.pliCount - this.statsResults.internal[mediaType][sendrecvType].pliCount;\n      this.statsResults[mediaType][sendrecvType].currentPacketsLost = result.packetsLost - this.statsResults.internal[mediaType][sendrecvType].packetsLost;\n      if (this.statsResults[mediaType][sendrecvType].currentPacketsLost < 0) {\n        this.statsResults[mediaType][sendrecvType].currentPacketsLost = 0;\n      }\n\n      this.statsResults[mediaType][sendrecvType].packetsReceived = result.packetsReceived - this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived;\n      this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived = result.packetsReceived;\n\n      if (this.statsResults[mediaType][sendrecvType].packetsReceived === 0) {\n        LoggerProxy.logger.info(`StatsAnalyzer:index#processInboundRTPResult --> No packets received for ${mediaType} `, this.statsResults[mediaType][sendrecvType].packetsReceived);\n      }\n\n      //  Check the over all packet Lost ratio\n      this.statsResults[mediaType][sendrecvType].currentPacketLossRatio = this.statsResults[mediaType][sendrecvType].currentPacketsLost > 0 ? this.statsResults[mediaType][sendrecvType].currentPacketsLost / (this.statsResults[mediaType][sendrecvType].packetsReceived + this.statsResults[mediaType][sendrecvType].currentPacketsLost) : 0;\n      if (this.statsResults[mediaType][sendrecvType].currentPacketLossRatio > 3) {\n        LoggerProxy.logger.info('StatsAnalyzer:index#processInboundRTPResult --> Packets getting lost from the receiver ', this.statsResults[mediaType][sendrecvType].currentPacketLossRatio);\n      }\n\n      this.statsResults[mediaType][sendrecvType].totalPacketsLost = result.packetsLost;\n      this.statsResults[mediaType][sendrecvType].lastPacketReceivedTimestamp = result.lastPacketReceivedTimestamp;\n\n      // From Thin\n      this.statsResults[mediaType][sendrecvType].totalNackCount = result.nackCount;\n      this.statsResults[mediaType][sendrecvType].totalPliCount = result.pliCount;\n      this.statsResults[mediaType][sendrecvType].framesDecoded = result.framesDecoded;\n      this.statsResults[mediaType][sendrecvType].keyFramesDecoded = result.keyFramesDecoded;\n      this.statsResults[mediaType][sendrecvType].totalSamplesReceived = result.totalSamplesReceived || 0;\n      this.statsResults[mediaType][sendrecvType].totalSamplesDecoded = result.totalSamplesDecoded || 0;\n\n      this.statsResults[mediaType][sendrecvType].decoderImplementation = result.decoderImplementation;\n      this.statsResults[mediaType][sendrecvType].totalPacketsReceived = result.packetsReceived;\n\n\n      this.statsResults[mediaType][sendrecvType].fecPacketsDiscarded = result.fecPacketsDiscarded;\n      this.statsResults[mediaType][sendrecvType].fecPackets = result.fecPacketsReceived;\n      this.statsResults[mediaType][sendrecvType].totalBytesReceived = result.bytesReceived;\n      this.statsResults[mediaType][sendrecvType].headerBytesReceived = result.headerBytesReceived;\n      this.statsResults[mediaType][sendrecvType].jitter = result.jitter;\n    }\n  }\n\n  /**\n   * Processes remote candidate result and stores\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @param {boolean} isSender\n   *\n   * @returns {void}\n   */\n  remotecandidate = (result, type, isSender) => {\n    if (!result || !result.id) {\n      return;\n    }\n    const RemoteCandidateType = {};\n    const RemoteTransport = {};\n    const RemoteIpAddress = {};\n    const RemoteNetworkType = {};\n\n    if (!result.id) return;\n\n    const sendRecvType = isSender ? 'send' : 'recv';\n\n    if (!RemoteCandidateType[result.id]) {\n      RemoteCandidateType[result.id] = [];\n    }\n\n    if (!RemoteTransport[result.id]) {\n      RemoteTransport[result.id] = [];\n    }\n\n    if (!RemoteIpAddress[result.id]) {\n      RemoteIpAddress[result.id] = [];\n    }\n    if (!RemoteNetworkType[result.id]) {\n      RemoteNetworkType[result.id] = [];\n    }\n\n    if (result.candidateType && RemoteCandidateType[result.id].indexOf(result.candidateType) === 0) {\n      RemoteCandidateType[result.id].push(result.candidateType);\n    }\n\n    if (result.transport && RemoteTransport[result.id].indexOf(result.transport) === 0) {\n      RemoteTransport[result.id].push(result.transport);\n    }\n\n    if (result.ipAddress && RemoteIpAddress[result.id].indexOf(`${result.ipAddress}:${result.portNumber}`) === 0) {\n      RemoteIpAddress[result.id].push(`${result.ipAddress}:${result.portNumber}`);\n    }\n\n    if (result.networkType && RemoteNetworkType[result.id].indexOf(result.networkType) === 0) {\n      RemoteNetworkType[result.id].push(result.networkType);\n    }\n\n    this.statsResults.internal.candidates[result.id] = {\n      candidateType: RemoteCandidateType[result.id],\n      ipAddress: RemoteIpAddress[result.id],\n      portNumber: result.portNumber,\n      networkType: RemoteNetworkType[result.id],\n      priority: result.priority,\n      transport: RemoteTransport[result.id],\n      timestamp: result.timestamp,\n      id: result.id,\n      type: result.type\n    };\n\n    this.statsResults.connectionType.remote.candidateType = RemoteCandidateType[result.id];\n    this.statsResults.connectionType.remote.ipAddress = RemoteIpAddress[result.id];\n    this.statsResults.connectionType.remote.networkType = RemoteNetworkType[result.id];\n    this.statsResults.connectionType.remote.transport = RemoteTransport[result.id];\n\n    this.statsResults[type][sendRecvType].totalRoundTripTime = result.totalRoundTripTime;\n    this.statsResults[type][sendRecvType].bytesReceived = result.bytesReceived;\n    this.statsResults[type][sendRecvType].bytesSent = result.bytesSent;\n    this.statsResults[type][sendRecvType].packetsReceived = result.packetsReceived || 0;\n    this.statsResults[type][sendRecvType].packetsSent = result.packetsSent || 0;\n    this.statsResults[type][sendRecvType].currentRoundTripTime = result.currentRoundTripTime;\n    this.statsResults[type][sendRecvType].availableOutgoingBitrate = result.availableOutgoingBitrate;\n    this.statsResults[type][sendRecvType].availableIncomingBitrate = result.availableIncomingBitrate;\n  };\n\n\n  /**\n   * Process Track results\n   *\n   * @private\n   * @param {*} result\n   * @param {*} mediaType\n   * @returns {void}\n   * @memberof StatsAnalyzer\n   */\n  processTrackResult(result, mediaType) {\n    if (!result || result.type !== 'track') {\n      return;\n    }\n    if (result.type !== 'track') return;\n\n    const sendrecvType = result.remoteSource === true ? 'recv' : 'send';\n\n    if (result.frameWidth && result.frameHeight) {\n      this.statsResults.resolutions[mediaType][sendrecvType].width = result.frameWidth;\n      this.statsResults.resolutions[mediaType][sendrecvType].height = result.frameHeight;\n      this.statsResults.resolutions[mediaType][sendrecvType].framesSent = result.framesSent;\n      this.statsResults.resolutions[mediaType][sendrecvType].hugeFramesSent = result.hugeFramesSent;\n    }\n\n    if (sendrecvType === 'recv') {\n      this.statsResults.resolutions[mediaType][sendrecvType].framesReceived = result.framesReceived;\n      this.statsResults.resolutions[mediaType][sendrecvType].framesDecoded = result.framesDecoded;\n      this.statsResults.resolutions[mediaType][sendrecvType].framesDropped = result.framesDropped;\n    }\n\n\n    if (result.trackIdentifier && mediaType !== 'audio') {\n      this.statsResults.resolutions[mediaType][sendrecvType].trackIdentifier = result.trackIdentifier;\n\n      const jitterBufferDelay = result && result.jitterBufferDelay;\n      const jitterBufferEmittedCount = result && result.jitterBufferEmittedCount;\n\n      this.statsResults.resolutions[mediaType][sendrecvType].avgJitterDelay = jitterBufferEmittedCount && (+jitterBufferDelay / +jitterBufferEmittedCount);\n    }\n  }\n\n  /**\n   *\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @returns {void}\n   * @memberof StatsAnalyzer\n   */\n  compareSentAndReceived(result, type) {\n    if (!type) {\n      return;\n    }\n\n    const mediaType = type;\n\n    if (!this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver) { this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost; }\n\n    const currentPacketLoss = result.packetsLost - this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver;\n\n    this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;\n    this.statsResults[mediaType].send.packetsLostOnReceiver = currentPacketLoss;\n    this.statsResults[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;\n    this.statsResults[mediaType].send.jitter = result.jitter;\n    this.statsResults[mediaType].send.roundTripTime = result.roundTripTime;\n    this.statsResults[mediaType].send.timestamp = result.timestamp;\n    this.statsResults[mediaType].send.ssrc = result.ssrc;\n    this.statsResults[mediaType].send.reportsReceived = result.reportsReceived;\n\n    // Total packloss ratio on this video section of the call\n    this.statsResults[mediaType].send.overAllPacketLossRatio = this.statsResults[mediaType].send.totalPacketsLostOnReceiver > 0 ? this.statsResults[mediaType].send.totalPacketsLostOnReceiver / this.statsResults[mediaType].send.totalPacketsSent : 0;\n\n    this.statsResults[mediaType].send.currentPacketLossRatio = this.statsResults[mediaType].send.packetsLostOnReceiver > 0 ? this.statsResults[mediaType].send.packetsLostOnReceiver * 100 / (this.statsResults[mediaType].send.packetsSent + this.statsResults[mediaType].send.packetsLostOnReceiver) : 0;\n\n    if (this.statsResults[mediaType].send.maxPacketLossRatio < this.statsResults[mediaType].send.currentPacketLossRatio) {\n      this.statsResults[mediaType].send.maxPacketLossRatio = this.statsResults[mediaType].send.currentPacketLossRatio;\n    }\n\n\n    if (this.statsResults[mediaType].send.currentPacketLossRatio > this.config.videoPacketLossRatioThreshold && mediaType === STATS.VIDEO_CORRELATE) {\n      // Trigger downgrade video callback\n      LoggerProxy.logger.log('StatsAnalyzer:index#compareSentAndReceived -->  Packet Loss is high ', this.statsResults[mediaType].send.currentPacketLossRatio);\n      this.emit(\n        {\n          file: 'statsAnalyzer',\n          function: 'compareSentAndReceived'\n        },\n        EVENT_TRIGGERS.MEETING_HIGH_PACKETLOSS,\n        {\n          mediaType,\n          packetLossRatio: this.statsResults[mediaType].send.currentPacketLossRatio\n        }\n      );\n    }\n  }\n}\n"]}