{"version":3,"sources":["mqaUtil.js"],"names":["getAudioReceiverMqa","audioReceiver","statsResults","lastMqaDataSent","mediaType","sendrecvType","common","rtpPackets","totalPacketsReceived","streams","mediaHopByHopLost","totalPacketsLost","rtpHopByHopLost","rtpJitter","jitter","rtpEndToEndLost","framesDropped","totalSamplesDecoded","renderedFrameRate","framesReceived","totalSamplesReceived","receivedFrameRate","receivedBitrate","totalBytesReceived","getAudioSenderMqa","audioSender","remoteJitter","totalPacketsSent","availableBitrate","availableOutgoingBitrate","totalpacketsLostForaMin","totalPacketsLostOnReceiver","remoteLossRate","roundTripTime","totalBytesSentInaMin","totalBytesSent","transmittedBitrate","transmittedKeyFrames","totalKeyFramesEncoded","requestedKeyFrames","totalFirCount","getVideoReceiverMqa","videoReceiver","isShareStream","totalPacketLoss","totalBytesReceivedInaMin","totalFrameReceivedInaMin","resolutions","totalFrameDecodedInaMin","framesDecoded","receivedHeight","height","receivedWidth","width","receivedFrameSize","getVideoSenderMqa","videoSender","totalFrameSentInaMin","framesSent","transmittedFrameRate","transmittedHeight","transmittedWidth","transmittedFrameSize"],"mappings":"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","sourcesContent":["export const getAudioReceiverMqa = ({audioReceiver, statsResults, lastMqaDataSent}) => {\n  const mediaType = 'audio';\n  const sendrecvType = 'recv';\n\n  // add rtpPacket info inside common as also for call analyzer\n  audioReceiver.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].totalPacketsReceived || 0;\n  // Hop by hop are numbers and not percentage so we compare on what we sent the last min\n  // collect the packets received for the last min\n  audioReceiver.streams[0].common.rtpPackets = audioReceiver.common.rtpPackets;\n  audioReceiver.common.mediaHopByHopLost = (statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost) || 0;\n  audioReceiver.common.rtpHopByHopLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost || 0;\n  audioReceiver.streams[0].common.rtpJitter = statsResults[mediaType][sendrecvType].jitter * 1000 || 0;\n\n  audioReceiver.streams[0].common.rtpEndToEndLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost || 0;\n\n  audioReceiver.streams[0].common.framesDropped = statsResults[mediaType][sendrecvType].totalSamplesDecoded - lastMqaDataSent[mediaType][sendrecvType].totalSamplesDecoded || 0;\n  audioReceiver.streams[0].common.renderedFrameRate = audioReceiver.streams[0].common.framesDropped * 100 / 60 || 0;\n\n  audioReceiver.streams[0].common.framesReceived = statsResults[mediaType][sendrecvType].totalSamplesReceived - lastMqaDataSent[mediaType][sendrecvType].totalSamplesReceived || 0;\n  audioReceiver.streams[0].common.receivedFrameRate = audioReceiver.streams[0].common.framesReceived * 100 / 60 || 0;\n\n  audioReceiver.streams[0].common.receivedBitrate = (statsResults[mediaType][sendrecvType].totalBytesReceived - lastMqaDataSent[mediaType][sendrecvType].totalBytesReceived) * 8 / 60 || 0;\n};\n\n\nexport const getAudioSenderMqa = ({audioSender, statsResults, lastMqaDataSent}) => {\n  const mediaType = 'audio';\n  const sendrecvType = 'send';\n\n  audioSender.common.remoteJitter = statsResults[mediaType][sendrecvType].jitter * 1000 || 0;\n  audioSender.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;\n  audioSender.streams[0].common.rtpPackets = audioSender.common.rtpPackets;\n  // From candidate-pair\n  audioSender.common.availableBitrate = statsResults[mediaType][sendrecvType].availableOutgoingBitrate || 0;\n  // Calculate based on how much packets lost of received compated to how to the client sent\n\n  const totalpacketsLostForaMin = statsResults[mediaType][sendrecvType].totalPacketsLostOnReceiver - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLostOnReceiver;\n\n  audioSender.common.remoteLossRate = totalpacketsLostForaMin > 0 ? (totalpacketsLostForaMin * 100 / audioSender.common.rtpPackets) : 0; // This is the packets sent with in last min || 0;\n  audioSender.common.roundTripTime = statsResults[mediaType][sendrecvType].roundTripTime * 1000 || 0;\n\n  // Calculate the outgoing bitrate\n  const totalBytesSentInaMin = statsResults[mediaType][sendrecvType].totalBytesSent - lastMqaDataSent[mediaType][sendrecvType].totalBytesSent;\n\n  audioSender.streams[0].common.transmittedBitrate = totalBytesSentInaMin ? (totalBytesSentInaMin) * 8 / 60 : 0;\n  audioSender.streams[0].transmittedKeyFrames = statsResults[mediaType][sendrecvType].totalKeyFramesEncoded - lastMqaDataSent[mediaType][sendrecvType].totalKeyFramesEncoded || 0;\n  audioSender.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalFirCount - lastMqaDataSent[mediaType][sendrecvType].totalFirCount || 0;\n};\n\n\nexport const getVideoReceiverMqa = ({\n  videoReceiver, statsResults, lastMqaDataSent, isShareStream = false\n}) => {\n  const mediaType = isShareStream ? 'share' : 'video';\n  const sendrecvType = 'recv';\n\n  // collect the packets received for the last min\n  videoReceiver.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].totalPacketsReceived || 0;\n  videoReceiver.streams[0].common.rtpPackets = videoReceiver.common.rtpPackets;\n\n  const totalPacketLoss = (statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost) || 0;\n\n  // Hope by hop are numbers and not percentage so we compare on what we sent the last min\n  videoReceiver.common.mediaHopByHopLost = totalPacketLoss; // TODO: calculate the value\n  videoReceiver.common.rtpHopByHopLost = totalPacketLoss; // TODO: calculate the value\n  videoReceiver.streams[0].common.rtpJitter = statsResults[mediaType][sendrecvType].jitter * 1000 || 0;\n  videoReceiver.streams[0].common.rtpEndToEndLost = totalPacketLoss;// TODO: calculate the value\n\n  // Calculate the outgoing bitrate\n  const totalBytesReceivedInaMin = statsResults[mediaType][sendrecvType].totalBytesReceived - lastMqaDataSent[mediaType][sendrecvType].totalBytesReceived;\n\n  videoReceiver.streams[0].common.receivedBitrate = totalBytesReceivedInaMin ? (totalBytesReceivedInaMin) * 8 / 60 : 0;\n  // From tracks //TODO: calculate a proper one\n  const totalFrameReceivedInaMin = statsResults.resolutions[mediaType][sendrecvType].framesReceived - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesReceived;\n  const totalFrameDecodedInaMin = statsResults.resolutions[mediaType][sendrecvType].framesDecoded - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesDecoded;\n\n  videoReceiver.streams[0].common.receivedFrameRate = totalFrameReceivedInaMin ? totalFrameReceivedInaMin * 100 / 60 : 0;\n  videoReceiver.streams[0].common.renderedFrameRate = totalFrameDecodedInaMin ? totalFrameDecodedInaMin * 100 / 60 : 0;\n\n  videoReceiver.streams[0].common.framesDropped = statsResults.resolutions[mediaType][sendrecvType].framesDropped - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesDropped;\n  videoReceiver.streams[0].receivedHeight = statsResults.resolutions[mediaType][sendrecvType].height;\n  videoReceiver.streams[0].receivedWidth = statsResults.resolutions[mediaType][sendrecvType].width;\n  videoReceiver.streams[0].receivedFrameSize = statsResults.resolutions[mediaType][sendrecvType].height * statsResults.resolutions[mediaType][sendrecvType].height / 256;\n};\n\nexport const getVideoSenderMqa = ({\n  videoSender, statsResults, lastMqaDataSent, isShareStream = false\n}) => {\n  const mediaType = isShareStream ? 'share' : 'video';\n  const sendrecvType = 'send';\n\n  videoSender.common.remoteJitter = statsResults[mediaType][sendrecvType].jitter * 1000 || 0;\n  videoSender.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;\n  videoSender.common.availableBitrate = statsResults[mediaType][sendrecvType].availableOutgoingBitrate || 0;\n  // Calculate based on how much packets lost of received compated to how to the client sent\n\n  const totalpacketsLostForaMin = statsResults[mediaType][sendrecvType].totalPacketsLostOnReceiver - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLostOnReceiver;\n\n  videoSender.common.remoteLossRate = totalpacketsLostForaMin > 0 ? (totalpacketsLostForaMin) * 100 / (videoSender.common.rtpPackets + totalpacketsLostForaMin) : 0; // This is the packets sent with in last min || 0;\n\n  videoSender.common.roundTripTime = statsResults[mediaType][sendrecvType].roundTripTime * 1000 || 0;\n  videoSender.streams[0].common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;\n\n  // Calculate the outgoing bitrate\n  const totalBytesSentInaMin = statsResults[mediaType][sendrecvType].totalBytesSent - lastMqaDataSent[mediaType][sendrecvType].totalBytesSent;\n\n  videoSender.streams[0].common.transmittedBitrate = totalBytesSentInaMin ? (totalBytesSentInaMin) * 8 / 60 : 0;\n  videoSender.streams[0].transmittedKeyFrames = statsResults[mediaType][sendrecvType].totalKeyFramesEncoded - lastMqaDataSent[mediaType][sendrecvType].totalKeyFramesEncoded || 0;\n  videoSender.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalFirCount - lastMqaDataSent[mediaType][sendrecvType].totalFirCount || 0;\n\n  // From tracks //TODO: calculate a proper one\n  const totalFrameSentInaMin = statsResults.resolutions[mediaType][sendrecvType].framesSent - (lastMqaDataSent.resolutions[mediaType][sendrecvType].framesSent || 0);\n\n  videoSender.streams[0].common.transmittedFrameRate = totalFrameSentInaMin ? totalFrameSentInaMin * 100 / 60 : 0;\n  videoSender.streams[0].transmittedHeight = statsResults.resolutions[mediaType][sendrecvType].height;\n  videoSender.streams[0].transmittedWidth = statsResults.resolutions[mediaType][sendrecvType].width;\n  videoSender.streams[0].transmittedFrameSize = statsResults.resolutions[mediaType][sendrecvType].height * statsResults.resolutions[mediaType][sendrecvType].width / 254;\n};\n"]}