{"version":3,"sources":["request.js"],"names":["LogsRequest","options","webex","id","feedbackId","uuid","v4","locusId","correlationId","LoggerProxy","logger","info","internal","support","submitLogs","error"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA;;;IAGqBA,W;AACnB;;;;;;AAMA,uBAAYC,OAAZ,EAAqB;AAAA;AACnB,SAAKC,KAAL,GAAaD,OAAO,CAACC,KAArB;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;AAUiBD,gBAAAA,O,2DAAU,E;AACnBE,gBAAAA,E,GAAKF,OAAO,CAACG,UAAR,IAAsBC,cAAKC,EAAL,E;AAC1BC,gBAAAA,O,GAA0BN,O,CAA1BM,O,EAASC,a,GAAiBP,O,CAAjBO,a;;AAEhBC,qCAAYC,MAAZ,CAAmBC,IAAnB,2EAA2FR,EAA3F;;;;uBAGQ,KAAKD,KAAL,CAAWU,QAAX,CAAoBC,OAApB,CAA4BC,UAA5B,CAAuC;AAACV,kBAAAA,UAAU,EAAED,EAAb;AAAiBI,kBAAAA,OAAO,EAAPA,OAAjB;AAA0BC,kBAAAA,aAAa,EAAbA;AAA1B,iBAAvC,C;;;;;;;;;;AAGNC,qCAAYC,MAAZ,CAAmBK,KAAnB,CAAyB,wDAAzB;;;iDAGKZ,E","sourcesContent":["import uuid from 'uuid';\n\nimport LoggerProxy from './logger-proxy';\n\n/**\n * @class LogsRequest\n */\nexport default class LogsRequest {\n  /**\n   *\n   * @param {Object} options\n   * @param {Object} options.webex Webex SDK instance\n   * @param {ClientMetrics} metrics\n   */\n  constructor(options) {\n    this.webex = options.webex;\n  }\n\n  /**\n   * Uploads logs to the support server\n   *\n   * @param {Object} [options={}]\n   * @param {String} [options.feedbackId=uuid.v4] ID used for tracking\n   * @param {String} [options.locusId]\n   * @param {Stirng} [options.correlationId]\n   * @returns {Promise.<String>} Feedback ID\n   * @memberof LogsRequest\n   */\n  async uploadLogs(options = {}) {\n    const id = options.feedbackId || uuid.v4();\n    const {locusId, correlationId} = options;\n\n    LoggerProxy.logger.info(`Logs:request#uploadLogs --> uploading user logs for feedbackId: ${id}`);\n\n    try {\n      await this.webex.internal.support.submitLogs({feedbackId: id, locusId, correlationId});\n    }\n    catch (error) {\n      LoggerProxy.logger.error('Logs:request#uploadLogs --> uploading user logs failed', error);\n    }\n\n    return id;\n  }\n}\n"]}