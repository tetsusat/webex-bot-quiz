"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _uuid = _interopRequireDefault(require("uuid"));

var _loggerProxy = _interopRequireDefault(require("./logger-proxy"));

/**
 * @class LogsRequest
 */
var LogsRequest = /*#__PURE__*/function () {
  /**
   *
   * @param {Object} options
   * @param {Object} options.webex Webex SDK instance
   * @param {ClientMetrics} metrics
   */
  function LogsRequest(options) {
    (0, _classCallCheck2.default)(this, LogsRequest);
    this.webex = options.webex;
  }
  /**
   * Uploads logs to the support server
   *
   * @param {Object} [options={}]
   * @param {String} [options.feedbackId=uuid.v4] ID used for tracking
   * @param {String} [options.locusId]
   * @param {Stirng} [options.correlationId]
   * @returns {Promise.<String>} Feedback ID
   * @memberof LogsRequest
   */


  (0, _createClass2.default)(LogsRequest, [{
    key: "uploadLogs",
    value: function () {
      var _uploadLogs = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var options,
            id,
            locusId,
            correlationId,
            _args = arguments;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
                id = options.feedbackId || _uuid.default.v4();
                locusId = options.locusId, correlationId = options.correlationId;

                _loggerProxy.default.logger.info("Logs:request#uploadLogs --> uploading user logs for feedbackId: ".concat(id));

                _context.prev = 4;
                _context.next = 7;
                return this.webex.internal.support.submitLogs({
                  feedbackId: id,
                  locusId: locusId,
                  correlationId: correlationId
                });

              case 7:
                _context.next = 12;
                break;

              case 9:
                _context.prev = 9;
                _context.t0 = _context["catch"](4);

                _loggerProxy.default.logger.error('Logs:request#uploadLogs --> uploading user logs failed', _context.t0);

              case 12:
                return _context.abrupt("return", id);

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[4, 9]]);
      }));

      function uploadLogs() {
        return _uploadLogs.apply(this, arguments);
      }

      return uploadLogs;
    }()
  }]);
  return LogsRequest;
}();

exports.default = LogsRequest;
//# sourceMappingURL=request.js.map
