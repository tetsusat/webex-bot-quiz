"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty2 = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty2(exports, "__esModule", {
  value: true
});

exports.createReplyEditActivity = exports.createEditActivity = exports.createReplyActivity = exports.createRootActivity = exports.determineActivityType = exports.getIsActivityOrphaned = exports.sanitizeActivity = exports.isDeleteActivity = exports.isCreateActivity = exports.isEditActivity = exports.isReplyActivity = exports.isRootActivity = exports.getParentId = exports.sortActivitiesByPublishedDate = exports.isNewer = exports.getPublishedDate = exports.getActivityType = exports.ACTIVITY_TYPES = exports.INITIAL = exports.MID = exports.NEWER = exports.OLDER = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/define-property"));

var _defineProperties = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/define-properties"));

var _getOwnPropertyDescriptors = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptors"));

var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-symbols"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _sortBy2 = _interopRequireDefault(require("lodash/sortBy"));

function ownKeys(object, enumerableOnly) { var keys = (0, _keys.default)(object); if (_getOwnPropertySymbols.default) { var symbols = (0, _getOwnPropertySymbols.default)(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return (0, _getOwnPropertyDescriptor.default)(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty3.default)(target, key, source[key]); }); } else if (_getOwnPropertyDescriptors.default) { (0, _defineProperties.default)(target, (0, _getOwnPropertyDescriptors.default)(source)); } else { ownKeys(Object(source)).forEach(function (key) { (0, _defineProperty2.default)(target, key, (0, _getOwnPropertyDescriptor.default)(source, key)); }); } } return target; }

var OLDER = 'older';
exports.OLDER = OLDER;
var NEWER = 'newer';
exports.NEWER = NEWER;
var MID = 'mid';
exports.MID = MID;
var INITIAL = 'initial';
exports.INITIAL = INITIAL;
var ACTIVITY_TYPES = {
  REPLY: 'REPLY',
  EDIT: 'EDIT',
  REACTION: 'REACTION',
  REACTION_SELF: 'REACTION_SELF',
  ROOT: 'ROOT',
  CREATE: 'CREATE',
  TOMBSTONE: 'TOMBSTONE',
  DELETE: 'DELETE',
  REPLY_EDIT: 'REPLY_EDIT'
};
exports.ACTIVITY_TYPES = ACTIVITY_TYPES;
var REPLY = 'reply';
var EDIT = 'edit';
var REACTION_SUMMARY = 'reactionSummary';
var REACTION_SELF_SUMMARY = 'reactionSelfSummary';
var CREATE = 'create';
var TOMBSTONE = 'tombstone';
var DELETE = 'delete';
var ADD = 'add';

var getActivityType = function getActivityType(activity) {
  if (activity.activityType === REPLY) {
    return ACTIVITY_TYPES.REPLY;
  }

  if (activity.parent && activity.parent.type === EDIT) {
    return ACTIVITY_TYPES.EDIT;
  }

  if (activity.verb === ADD || activity.type === REACTION_SUMMARY) {
    return ACTIVITY_TYPES.REACTION;
  }

  if (activity.type === REACTION_SELF_SUMMARY) {
    return ACTIVITY_TYPES.REACTION_SELF;
  }

  if (activity.verb === CREATE) {
    return ACTIVITY_TYPES.CREATE;
  }

  if (activity.verb === TOMBSTONE) {
    return ACTIVITY_TYPES.TOMBSTONE;
  }

  if (activity.verb === DELETE) {
    return ACTIVITY_TYPES.DELETE;
  }

  return ACTIVITY_TYPES.ROOT;
};

exports.getActivityType = getActivityType;

var getPublishedDate = function getPublishedDate() {
  var activity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return new Date(activity.published).getTime();
};
/**
 * @param {Object} activity1
 * @param {Object} activity2
 * @returns {boolean} true if first activity is newer than second
 */


exports.getPublishedDate = getPublishedDate;

var isNewer = function isNewer(activity1, activity2) {
  return getPublishedDate(activity1) > getPublishedDate(activity2);
};

exports.isNewer = isNewer;

var sortActivitiesByPublishedDate = function sortActivitiesByPublishedDate(activities) {
  return (0, _sortBy2.default)(activities, function (activity) {
    return getPublishedDate(activity);
  });
};

exports.sortActivitiesByPublishedDate = sortActivitiesByPublishedDate;

var getParentId = function getParentId(activity) {
  return activity && activity.parent && activity.parent.id;
};

exports.getParentId = getParentId;

var isRootActivity = function isRootActivity(act) {
  return getActivityType(act) === ACTIVITY_TYPES.ROOT;
};

exports.isRootActivity = isRootActivity;

var isReplyActivity = function isReplyActivity(act) {
  return getActivityType(act) === ACTIVITY_TYPES.REPLY;
};

exports.isReplyActivity = isReplyActivity;

var isEditActivity = function isEditActivity(act) {
  return getActivityType(act) === ACTIVITY_TYPES.EDIT;
};

exports.isEditActivity = isEditActivity;

var isCreateActivity = function isCreateActivity(act) {
  return getActivityType(act) === ACTIVITY_TYPES.CREATE;
};

exports.isCreateActivity = isCreateActivity;

var isDeleteActivity = function isDeleteActivity(act) {
  return getActivityType(act) === ACTIVITY_TYPES.DELETE;
};

exports.isDeleteActivity = isDeleteActivity;

var sanitizeActivity = function sanitizeActivity(activity) {
  var final = _objectSpread({}, activity);

  final.reaction = activity.reaction || {};
  final.reactionSelf = activity.reactionSelf || {}; // replies will be spread in order beneath parent, no need to include on final objects

  delete final.replies;
  return final;
};

exports.sanitizeActivity = sanitizeActivity;

var getIsActivityOrphaned = function getIsActivityOrphaned(activity, activities) {
  return activity.parent && activity.parent.id && !activities[activity.parent.id];
};

exports.getIsActivityOrphaned = getIsActivityOrphaned;

var getIsReplyEditActivity = function getIsReplyEditActivity(activity, activities) {
  var parentId = activity.parent.id;
  var parentActivity = activities[parentId];
  return parentActivity && isReplyActivity(parentActivity);
};

var determineActivityType = function determineActivityType(activity, activities) {
  var initialType = getActivityType(activity); // edits to a reply, while they are replies themselves, appear in every way as edits
  // the only way to dermine their status as an edited reply is to find the original reply

  if (initialType === ACTIVITY_TYPES.EDIT) {
    var isReplyEditActivity = getIsReplyEditActivity(activity, activities);
    return isReplyEditActivity ? ACTIVITY_TYPES.REPLY_EDIT : initialType;
  }

  return initialType;
};

exports.determineActivityType = determineActivityType;

var createRootActivity = function createRootActivity(activity) {
  return activity;
};

exports.createRootActivity = createRootActivity;

var createReplyActivity = function createReplyActivity(activity) {
  var replyAct = _objectSpread(_objectSpread({}, activity), {}, {
    replyParent: activity.parent
  });

  return replyAct;
};

exports.createReplyActivity = createReplyActivity;

var createEditActivity = function createEditActivity(editActivity, activities) {
  var editActParentObj = editActivity.parent;
  var parentId = editActParentObj.id;
  var parentAct = activities[parentId];

  var joinedEditAct = _objectSpread(_objectSpread({}, parentAct), {}, {
    id: editActivity.id,
    parent: editActParentObj,
    editParent: editActParentObj,
    object: editActivity.object,
    published: editActivity.published
  });

  return joinedEditAct;
}; // takes an edit activity whose parent is a reply activity


exports.createEditActivity = createEditActivity;

var createReplyEditActivity = function createReplyEditActivity(editActivity, activities) {
  var editActParentObj = editActivity.parent;
  var parentId = editActParentObj.id;
  var parentReplyAct = activities[parentId];

  var joinedReplyEditActivity = _objectSpread(_objectSpread({}, parentReplyAct), {}, {
    id: editActivity.id,
    parent: editActParentObj,
    editParent: editActParentObj,
    replyParent: parentReplyAct.parent,
    object: editActivity.object,
    published: editActivity.published
  });

  return joinedReplyEditActivity;
};

exports.createReplyEditActivity = createReplyEditActivity;
//# sourceMappingURL=activities.js.map
